 

[{"answers":["C"],  

 

 

"options":[{"option":"Cookies are read, but the key value is not set because the value is not URL encoded."},{"option":"Cookies are not read because line 01 should be document, cookies, but the key value is set and all cookies are wiped."},{"option":"Cookies are read and the key value is set, the remaining cookies are unaffected."},{"option":"Cookies are read and the key value is set, and all cookies are wiped."}],  

 

 

"question":"A developer tries to retrieve all cookies, then sets a certain key value pair in the cookie. These statements are used:<code>document.cookie;<br>document.cookie = 'key=John Smith';</code>\nWhat is the behavior?"},  

 

 

  

  

 

 

{  

 

 

    "question":"Given the JavaScript below:<code>function filterDOM(searchString) {<br>\tconst parsedSearchString = searchString && searchString.toLowerCase();<br>\tdocument.querySelectorAll('.account').forEach(account => {<br>\t\tconst accountName = account.innerHTML.toLowerCase();<br>\t\taccount.style.display = accountName.includes(parsedSearchString) ? <br>\t\t/* Insert code here */;<br>\t});<br>}</code>Which code should replace the placeholder comment on line 06 to hide accounts that do not match the search string?",  

 

 

    "options":  

 

 

    [{"option":"'none' : 'block'"},  

 

 

    {"option":"'visible : 'hidden'"},  

 

 

    {"option":"'hidden, visible"},  

 

 

    {"option":"'block' : 'none'"}],  

 

 

    "answers":[4]  

 

 

},   

 

 

{  

 

 

    "question":"Refer to the code below:<code><html lang='en'><br>\t<table onclick=\"console.log('Table log');\"><br>\t\t<tr id='row1'><br>\t\t\t<td>Click me!</td><br>\t\t</tr><br>\t</table><br><br>\t<script><br>\t\tfunction printMessage(event) {<br>\t\t\tconsole.log('Row log');<br>\t\t}<br><br>\t\tlet elem = document.getElementById('row1');<br>\t\telem.addEventListener('click', printMessage, false);<br>\t</script><br></html></code>Which code change should be made for the console to log only Rowlog when 'Click me!' is clicked?",  

 

 

    "options":  

 

 

    [{"option":"Add.event.stopPropagation(); to window.onLoad event handler."},  

 

 

    {"option":"Add event.stopPropagation(); to printMessage function."},  

 

 

    {"option":"Add event.removeEventListener(); to window.onLoad event handler."},  

 

 

    {"option":"Add event.removeEventListener(); to printMessage function."}],  

 

 

    "answers":[2]  

 

 

},   

 

 

{  

 

 

    "question":"Refer to the code snippet:<code>function getAvailabilityMessage(item){\n    if(getAvailability(item)){\n        var msg = \"Username available\";\n    }\n    return msg;\n}</code>A developer writes this code to return a message to a user attempting to register a new username. If the username is available, variable. What is the return value of msg when getAvailabilityMessage (\"newUserName\" ) is executed and getAvailability(\"newUserName\") returns false?",  

 

 

    "options":  

 

 

    [{"option":"\"Username available\""},  

 

 

    {"option":"\"newUserName\""},  

 

 

    {"option":"\"Msg is not defined\""},  

 

 

    {"option":"undefined"}],  

 

 

    "answers":[4]  

 

 

},  

 

 

{  

 

 

    "question":"Refer to the following code: <code>let sampleText = 'The quick brown fox jumps';</code> A developer needs to determine if a certain substring is part of a string. Which three expressions return true for the given substring ? Choose 3 answers",  

 

 

    "options":  

 

 

    [{"option":"sampleText.includes('fox');"},  

 

 

    {"option":"sampleText.includes(' quick ', 4);"},  

 

 

    {"option":"sampleText.includes('Fox', 3)"},  

 

 

    {"option":"sampleText.includes(' fox ');"},  

 

 

    {"option":"sampleText.includes('quick') !== -1;"}],  

 

 

    "answers":[1,4,5]  

 

 

},  

 

 

{  

 

 

    "question":"A developer receives a comment from the Tech Lead that the code given below has error:<code>const monthName = 'July';<br>const year = 2019;\nif(year === 2019) {\n\tmonthName = 'June';\n}</code>Which line edit should be made to make this code run?",  

 

 

    "options":  

 

 

    [{"option":"01 let monthName ='July';"},  

 

 

    {"option":"02 let year =2019;"},  

 

 

    {"option":"02 const year = 2020;"},  

 

 

    {"option":"03 if (year == 2019) {"}],  

 

 

    "answers":[1]  

 

 

},  

 

 

{  

 

 

    "question":"Given the following code:<code>let x = null;\nconsole.log(typeof x);</code>What is the output?",  

 

 

    "options":  

 

 

    [{"option":"\"object\""},  

 

 

    {"option":"\"undefined\""},  

 

 

    {"option":"\"null\""},  

 

 

    {"option":"\"x\""}],  

 

 

    "answers":[1]  

 

 

},  

 

 

{  

 

 

    "question":"Refer to the code below:<code>function execute(){\n\treturn new Promise((resolve, reject) => reject())\n}\n\nlet promise = execute();\npromise\n\t.then(() => console.log('Resolved1'))\n\t.then(() => console.log('Resolved2'))\n\t.then(() => console.log('Resolved3'))\n\t.catch(() => console.log('Rejected'))\n\t.then(() => console.log('Resolved4'));</code>What is the result when the Promise in the execute function is rejected?",  

 

 

    "options":  

 

 

    [{"option":"Resolved1 Resolved2 Resolved3 Resolved4"},  

 

 

    {"option":"Rejected"},  

 

 

    {"option":"Rejected Resolved4"},  

 

 

    {"option":"Rejected1 Rejected2 Rejected3 Rejected Rejected Rejected4"}],  

 

 

    "answers":[3],
    "favorite":true

 

 

},  

 

 

{  

 

 

    "question":"A developer wants to create an object from a function in the browser using the code below:<code>function Monster() { this.name = 'hello' };<br>const z = Monster();</code>What happens due to lack of the new keyword on line 02?",  

 

 

    "options":  

 

 

    [{"option":"The z variable is assigned the correct object but this.name remains undefined."},  

 

 

    {"option":"window.m is assigned the correct object."},  

 

 

    {"option":"The z variable is assigned the correct object."},  

 

 

    {"option":"window.name is assigned to 'hello' and the variable z remains undefined."}],  

 

 

    "answers":[4]  

 

 

},  

 

 

{  

 

 

    "question":"Given the code below<code>setCurrentUrl();\nconsole.log('The current URL is: ' +url );\nfunction setCurrentUrl() {\n\turl = window.location.href;\n}</code>What happens when the code executes?",  

 

 

    "options":  

 

 

    [{"option":"The url variable has local scope and line 02 throws an error."},  

 

 

    {"option":"The url variable has local scope and line 02 executes correctly."},  

 

 

    {"option":"The url variable has global scope and line 02 throws an error."},  

 

 

    {"option":"The url variable has global scope and line 02 executes correctly."}],  

 

 

    "answers":[4]  

 

 

},  

 

 

{  

 

 

    "question":"Given the following code, what is the value of x?<code>let x = '15' + (10 * 2);</code>",  

 

 

    "options":  

 

 

    [{"option":"50"},  

 

 

    {"option":"3020"},  

 

 

    {"option":"35"},  

 

 

    {"option":"1520"}],  

 

 

    "answers":[4]  

 

 

},  

 

 

{  

 

 

    "question":"Which two console logs outputs NaN? Choose 2 answers",  

 

 

    "options":  

 

 

    [{"option":"console.log(10/ Number('5'));"},  

 

 

    {"option":"console.log(10/0);"},  

 

 

    {"option":"console.log(parseInt('two'));"},  

 

 

    {"option":"console.log(10/ 'five');"}],  

 

 

    "answers":[3,4]  

 

 

},  

 

 

{  

 

 

    "question":"A developer is setting up a new Node.js server with a client library that is built using events and callbacks.\n\nThe library:\n* Will establish a web socket connection and handle receipt of messages to the server.\n* Will be imported with require, and made available with a variable called ws.\n\nThe developer also wants to add error logging if a connection fails. Given this info, which code segment shows the correct way to set up a client with two events that listen at execution time?",  

 

 

    "options":  

 

 

    [{"option":"ws.on ('connect', () =&gt; {\n\tconsole.log('connected to client');\n\tws.on('error', (error) =&gt; { console.log('ERROR' , error); });\n});"},  

 

 

    {"option":"ws.on ('connect', () =&gt; {console.log('connected to client'); }};\nws.on('error', (error) =&gt; { console.log('ERROR' , error); }};"},  

 

 

    {"option":"ws.connect (() =&gt; { console.log('connected to client'); })\n.catch((error) =&gt; { console.log('ERROR' , error); }};"},  

 

 

    {"option":"try {\n\tws.connect (() =&gt; { console.log('connected to client'); }); \n}"}],  

 

 

    "answers":[2]  

 

 

},  

 

 

{  

 

 

    "question":"A developer wrote a fizzbuzz function that when passed in a number, returns the following:<ul><li>'fizz' if the number is divisible by 3.</li><li>'buzz' if the number is divisible by 5.</li><li>'fizzbuzz' if the number is divisible by both 3 and 5.</li><li>Empty string if the number is divisible by neither 3 or 5.</li></ul>Which two test cases will properly test scenarios for the fizzbuzz function? Choose 2 answers",  

 

 

    "options":  

 

 

    [{"option":"let res = fizzbuzz(5);\nconsole.assert (res === '');"},  

 

 

    {"option":"let res = fizzbuzz(3);\nconsole.assert (res === 'buzz')"},  

 

 

    {"option":"let res = fizzbuzz(Infinity);\nconsole.assert (res === '')"},  

 

 

    {"option":"let res = fizzbuzz(15);\nconsole.assert (res === 'fizzbuzz')"}],  

 

 

    "answers":[3,4]  

 

 

}, {  

 

 

    "question":"A developer is creating a simple webpage with a button. When a user clicks this button for the first time, a message is displayed. The developer wrote the JavaScript code below, but something is missing. The message gets displayed every time a user clicks the button, instead of just the first time.<code>function listen(event) {\n\n\talert('Hey! I am John Doe');\n\n}\nbutton.addEventListener('click', listen);</code>Which two code lines make this code work as required? Choose 2 answers",  

 

 

    "options":  

 

 

    [{"option":"On line 02, use event.first to test if it is the first execution."},  

 

 

    {"option":"On line 04, use button.removeEventListener(\"click\" , listen);"},  

 

 

    {"option":"On line 06, add an option called once to button.addEventListener();"},  

 

 

    {"option":"On line 04, use event.stopPropagation();"}],  

 

 

    "answers":[2,3]  

 

 

}, {  

 

 

    "question":"Given the code below:<code>function myFunction(){\n\ta = 5;\n\tvar b = 1;\n}\n\n\nmyFunction();\nconsole.log(a);\nconsole.log(b);</code>What is the expected output?",  

 

 

    "options":  

 

 

    [{"option":"Both lines 08 and 09 are executed, but values outputted are undefined."},  

 

 

    {"option":"Line 08 thrones an error, therefore line 09 is never executed."},  

 

 

    {"option":"Line 08 outputs the variable, but line 09 throws an error."},  

 

 

    {"option":"Both lines 08 and 09 are executed, and the variables are outputted."}],  

 

 

    "answers":[3],
    "favorite":true

 

 

}, {  

 

 

    "question":"A developer has two ways to write a function:\nOptionA:<code>function Monster() {\n\tthis.growl = () => {\n\t\tconsole.log('Grr!');\n\t}\n}</code>Option B:<code>function Monster() {};\nMonster.prototype.growl =() => {\n\tconsole.log('Grr!');\n}</code>After deciding on an option, the developer creates 1000 monster objects. How many growl methods are created with Option A and Option B?",  

 

 

    "options":  

 

 

    [{"option":"1000 growl method is created for Option A. 1 growl methods are created for Option B."},  

 

 

    {"option":"1 growl method is created regardless of which option is used."},  

 

 

    {"option":"1 growl method is created for Option A. 1000 growl methods are created for Option B."},  

 

 

    {"option":"1000 growl methods are created regardless of which option is used."}],  

 

 

    "answers":[1]  

 

 

}, {  

 

 

    "question":"A developer needs to debug a Node.js web server because a runtime error keeps occurring at one of the endpoints. The developer wants to test the endpoint on a local machine and make the request against a local server to look at the behavior. In the source code, the server.js file will start the server. the developer wants to debug the Node.js server only using the terminal. Which command can the developer use to open the CLI debugger in their current terminal window?",  

 

 

    "options":  

 

 

    [{"option":"node start inspect server.js"},  

 

 

    {"option":"node inspect server.js"},  

 

 

    {"option":"node -i server.js"},  

 

 

    {"option":"node server.js inspect"}],  

 

 

    "answers":[2]  

 

 

}, {  

 

 

    "question":"Refer to the following code block:<code>class Animal{\n\tconstructor(name){\n\t\tthis.name = name;\n\t}\n\tmakeSound(){\n\t\tconsole.log(`${this.name} is making a sound.`);\n\t}\n}\n\nclass Dog extends Animal{\n\tconstructor(name){\n\t\tsuper(name);\n\t\tthis.name = name;\n\t}\n\tmakeSound(){\n\t\tconsole.log(`${this.name} is barking.`)\n\t}\n}\n\nlet myDog = new Dog('Puppy');\nmyDog.makeSound();</code>What is the console output?",  

 

 

    "options":  

 

 

    [{"option":"Puppy is making a sound."},  

 

 

    {"option":"Puppy is barking."},  

 

 

    {"option":"null"},  

 

 

    {"option":"''"}],  

 

 

    "answers":[2]  

 

 

}, {  

 

 

    "question":"Refer to the following array:<code>let arr1 = [1, 2, 3, 4, 5];</code>Which two lines of code result in a second array, arr2 being created such that arr2 is not a reference to arr1?",  

 

 

    "options":  

 

 

    [{"option":"let arr2 = arr1.slice(0, 5);"},  

 

 

    {"option":"let arr2 = Array.from(arr1);"},  

 

 

    {"option":"let arr2 = arr1;"},  

 

 

    {"option":"let arr2 = arr1.sort();"}],  

 

 

    "answers":[1,2]  

 

 

}, {  

 

 

    "question":"At Universal Containers, every team has its own way of copying JavaScript objects. The code Snippet shows an implementation from one team: <code>function Person() {\n\tthis.firstName = \"John\";\n\tthis.lastName = 'Doe';\n\tthis.name = () => {\n\t\tconsole.log(`Hello ${this.firstName} ${this.firstName}`);\n\t}\n}\n\nconst john = new Person();\nconst dan = JSON.parse(JSON.stringify(john));\ndan.firstName = 'Dan';\ndan.name();</code>What is the Output of the code execution?",  

 

 

    "options":  

 

 

    [{"option":"TypeError: dan.name is not a function"},  

 

 

    {"option":"Hello John DOe"},  

 

 

    {"option":"Hello Dan Doe"},  

 

 

    {"option":"TypeError: Assignment to constant variable."}],  

 

 

    "answers":[1]  

 

 

}, {  

 

 

    "question":"Given the HTML below:<code><div id=\"row-uc\">Universal Containers</div></code>Which statement adds the priority-account CSS class to the Universal Containers row?",  

 

 

    "options":  

 

 

    [{"option":"document.queryselector('#row-uc').classList.add('priority-account');"},  

 

 

    {"option":"document.querySelector(#row-uc').classes-push('priority-account');"},  

 

 

    {"option":"document.querySelectorAll('#row-uc').classList.add(\"priority-accour');"},  

 

 

    {"option":"document.getElementByid('row-uc').addClass('priority-account*);"}],  

 

 

    "answers":[1]  

 

 

}, {  

 

 

    "question":"Refer to code below:<code>function Person() {\n\tthis.firstName = 'John';\n}\n\nPerson.prototype ={\n\tjob: x => 'Developer'\n};\n\nconst myFather = new Person();\nconst result = myFather.firstName + ' ' + myFather.job();</code>What is the value of the result after line 10 executes?",  

 

 

    "options":  

 

 

    [{"option":"Undefined Developer"},  

 

 

    {"option":"John undefined"},  

 

 

    {"option":"John Developer"},  

 

 

    {"option":"Error: myFather.job is not a function"}],  

 

 

    "answers":[3]  

 

 

}, {  

 

 

    "question":"Given the following code:<code>document.body.addEventListener('click', (event) => {\n\tif (/* CODE REPLACEMENT HERE */) {\n\t\tconsole.log('button clicked!');\n04\t}\n05 });</code>Which replacement for the conditional statement on line 02 allows a developer to correctly determine that a button on page is clicked?",  

 

 

    "options":  

 

 

    [{"option":"Event.clicked"},  

 

 

    {"option":"e.nodeTarget == this"},  

 

 

    {"option":"event.target.nodeName == 'BUTTON'"},  

 

 

    {"option":"button.addEventListener('click')"}],  

 

 

    "answers":[3]  

 

 

}, { 

"question":"A developer initiates a server with the file server.js and adds dependencies in the source codes package.json that are required to run the server. Which command should the developer run to start the server locally?", 

"options": 

[{"option":"start server.js"}, 

{"option":"npm start server.js"}, 

{"option":"npm start"}, 

{"option":"node start"}], 

"answers":[3] 

}, { 

"question":"myArray can have one level, two levels, or more levels. Which statement flattens myArray when it can be arbitrarily nested?", 

"options": 

[{"option":"myArray.reduce((prev, curr) =&gt; prev.concat(curr));"}, 

{"option":"myArray.join(\",\").split (\",\");"}, 

{"option":"[ ].concat.(...myArray) ;"}, 

{"option":"myArray.flat(Infinity);"}], 

"answers":[1],
"favorite":true

}, { 

"question":"A developer has a formatName function that takes two arguments, firstName and lastName and returns a string. They want to schedule the function to run once after five seconds.", 

"options": 

[{"option":"setTimeout (formatName(), 5000, 'John', 'Doe');"}, 

{"option":"setTimeout (formatName('John', 'Doe'), 5000);"}, 

{"option":"setTimout(() =&gt; { formatName('John', 'Doe') }, 5000);"}, 

{"option":"setTimeout ('formatName', 5000, 'John', 'Doe');"}], 

"answers":[3] 

}, { 

"question":"Which option is a core Node.js module?", 

"options": 

[{"option":"Path"}, 

{"option":"Ios"}, 

{"option":"Memory"}, 

{"option":"Locate"}], 

"answers":[1] 

}, 

{ 

"question":"A developer is wondering whether to use Promise.then or Promise.catch, especially when a Promise throws an error? Which two promises are rejected?", 

"options": 

[{"option":"Promise.reject(\"cool error here\").then(error =&gt; console.error(error));"}, 

{"option":"Promise.reject(\"cool error here\").catch(error =&gt; console.error(error));"}, 

{"option":"new Promise((resolve, reject) =&gt; {throw \"cool error here\"}).catch(error =&gt; console.error(error)) ;"}, 

{"option":"new Promise(() =&gt; {throw \"cool error here\"}).then(null, error =&gt; console.error(error));"}], 

"answers":[2,3] 

},{ 

"question":"Why would a developer specify a package.json as a developed forge instead of a dependency?", 

"options": 

[{"option":"It is required by the application in production."}, 

{"option":"It is only needed for local development and testing."}, 

{"option":"Other required packages depend on it for development."}, 

{"option":"It should be bundled when the package is published."}], 

"answers":[2],
"favorite":true

},{ 

"question":"Which three options show valid methods for creating a fat arrow function? Choose 3 answers", 

"options": 

[{"option":"(x,y,z) =&gt; ( console.log(' executed ') ;)"}, 

{"option":"() =&gt; ( console.log(' executed ') ;)"}, 

{"option":"[] =&gt; ( console.log(' executed ') ;)"}, 

{"option":"x =&gt; ( console.log(' executed ') ; )"}, 

{"option":"X,y,z =&gt; ( console.log(' executed ') ;)"}], 

"answers":[1,2,4] 

},{ 

"question":"Which statement returns all the paragraphs in the Shadow Dom element?", 

"options": 

[{"option":"const paragraphs = element.shadowDom.querySelectorAll('p');"}, 

{"option":"const paragraphs = element.shadowDom.querySelector('p');"}, 

{"option":"const paragraphs = element.shadowRoot.querySelectorAll('p');"}, 

{"option":"const paragraphs = element.shadowRoot.querySelector('p');"}], 

"answers":[3], 

"favorite": true 

},{ 

"question":"Which two syntax examples correctly initialize a value to the variable strLang?", 

"options": 

[{"option":"let strLang = 'javascript';","explanation":"This statement properly assigns the string javascript to the variable strLang."}, 

{"option":"const strLang = 'java' + 'script';","explanation":"This statement properly assigns the concatenated string javascript to the variable strLang."}, 

{"option":"let strLang = javascript;","explanation":"The string needs to be in single straight quotes (tick marks)."}, 

{"option":"str strLang = 'javascript';","explanation":"\"str\" is not a proper identifier."}], 

"answers":[1,2] 

},{ 

"question":"Which statement sorts the following number array so it is in ascending order?<code>const arr = [7, 3, 400, 10];</code>", 

"options": 

[{"option":"arr.sort();", "explanation": "The sort() function sorts values as strings, which will sort this as [10, 3, 400, 7]."}, 

{"option":"arr.sort((a, b) =&gt; a - b);", "explanation": "The compare function passed in sort() defines an alternative sort order."}, 

{"option":"arr.sort((a, b) =&gt; a &lt; b);", "explanation": "The compare function expects a positive, negative, or 0 to be returned."}, 

{"option":"arr.sort((a, b) =&gt; b - a);", "explanation": "The compare function will actually reverse the order of the numbers."}], 

"answers":[2], 

"favorite": true 

}, { 

"question":"A developer wants to use a module called DatePrettyPrint. This module exports one default function called printDate(). How can a developer import and use the printDate() function?", 

"options": 

[{"option":"import printDate() from '/path/DatePrettyPrint.js';  printDate();","explanation":"When naming the export function the parentheses are not needed."}, 

{"option":"import printDate from '/path/DatePrettyPrint.js';  printDate();","explanation":"This is the simplest version of code for importing the default."}, 

{"option":"import DatePrettyPrint from '/path/DatePrettyPrint.js';  DatePrettyPrint.printDate();","explanation":"You must call the methods directly or use the * to import all methods."}, 

{"option":"import printDate from '/path/DatePrettyPrint.js';  DatePrettyPrint.printDate();","explanation":"Once imported by name, you must call the imported method directly by name."}], 

"answers":[2] 

},{ 

"question":"If an application manipulates the browser history using the History API, which event should a developer use to detect when the browser's native back or forward button is clicked?", 

"options": 

[{"option":"popstate","explanation":"A popstate event is dispatched to the window each time the active"}, 

{"option":"navigate","explanation":"The navigate() method loads a specified URL."}, 

{"option":"pushstate","explanation":"The pushstate() method pushes the given data onto the session history stack"}, 

{"option":"change","explanation":"The change event is fired for changes to &lt;input&gt;, &lt;select&gt;, and &lt;textarea&gt;"}], 

"answers":[1],
"favorite":true

},{ 

"question":"Why would a developer specify a package in the package.json as a peerDependency?", 

"options": 

[{"option":"It is required by the application in production.","explanation":"It is required in all environments"}, 

{"option":"It is only needed for local development and testing.","explanation":"It is required in all environments"}, 

{"option":"Other required packages depend on it.","explanation":"Determine the version of the host package you peer-depend on for all environments, and add it to your package.json"}, 

{"option":"It should be bundled with other packages when the package is published.","explanation":"Peer dependencies are added to your package.json"}], 

"answers":[3],
"favorite":true

}, { 

"question":"Refer to the code below:<code>function foo () {\n\tconst a = 2;\n\tfunction bar() {\n\t\tconsole.log(a);\n\t}\n\treturn bar;\n}</code>Why does the function bar have access to variable a?", 

"options": 

[{"option":"Inner function's scope"}, 

{"option":"Hoisting"}, 

{"option":"Outer function's scope"}, 

{"option":"Prototype chain"}], 

"answers":[3] 

}, { 

"question":"Refer to the following code:<code>let obj = {\n\tfoo: 1,\n\tbar: 2\n}\nlet output = [];\nfor(let something in obj){\n\toutput.push(something);\n}\nconsole.log(output);</code>What is the output?", 

"options": 

[{"option":"[\"foo:1\", \"bar:2\"]"}, 

{"option":"[1,2]"}, 

{"option":"[\"foo\", \"bar\"]"}, 

{"option":"[\"bar\", \"foo\"]"}], 

"answers":[3] 

}, { 

"question":"Refer to code below:<code>function myFunction(reassign){\n\tlet x = 1;\n\tvar y = 1;\n\tif( reassign ) {\n\t\tlet x= 2;\n\t\tvar y = 2;\n\t\tconsole.log(x);\n\t\tconsole.log(y);\n\t}\n\tconsole.log(x);\n\tconsole.log(y);\n}</code>What is displayed when myFunction(true) is called?", 

"options": 

[{"option":"2 2 1 1"}, 

{"option":"2 2 undefined undefined"}, 

{"option":"2 2 1 2"}, 

{"option":"2 2 2 2"}], 

"answers":[3] 

}, { 

"question":"Refer to code below:<code>const objBook = {\n\ttitle: 'Javascript'\n};\nObject.preventExtensions(objBook);\nconst newObjBook = objBook;\nnewObjBook.author = 'Robert';</code>What are the values of objBook and newObjBook respectively?", 

"options": 

[{"option":"[title: \"javaScript\"] [title: \"javaScript\"]", "explanation": "An object is extensible if new properties can be added to it. Object.preventExtensions() marks an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible."}, 

{"option":"{author: \"Robert\", title: \"javaScript} undefined"}, 

{"option":"{author: \"Robert\", title: \"javaScript} {author: \"Robert\", title: \"javaScript}"}, 

{"option":"{author: \"Robert\"} {author: \"Robert\", title: \"javaScript}"}], 

"answers":[1] 

}, { 


"options": 

[{"option":"const sum = curr.startsWith('N')? 1: 0;\nreturn acc + sum"}, 

{"option":"const sum = curr.name.startsWith('N')? 1: 0;\nreturn acc + sum"}, 

{"option":"const sum = curr.startsWIth('N')? 1: 0;\nreturn curr + sum"}, 

{"option":"const sum = curr.name.startsWIth('N')? 1: 0;\nreturn curr + sum"}], 

"answers":[2] 

}, { 

"question":"A developer wants to define a function log to be used a few times on a single-file JavaScript script.<code>// Line 1 replacement\n\tconsole.log('LOG: ', logInput);\n}</code>Which two options can correctly replace line 01 and declare the function for use? Choose 2 answers", 

"options": 

[{"option":"function log(logInput) {"}, 

{"option":"const log(loginInput) {"}, 

{"option":"const log = (logInput) =&gt; {"}, 

{"option":"function log = (logInput) {"}], 

"answers":[1,3] 

}, { 

"question":"bar, awesome is a popular JavaScript module. the versions publish to npm are:<code>1.2\n1.3.1\n1.3.5\n1.4.0</code>Teams at Universal Containers use this module in a number of projects. A particular project has the package, json definition below.<code>{\n\t\"name\": \"UC Project Extra\",\n\t\"version\": \"0.0.5\",\n\t\"dependencies\": {\n\t\t\"bar.awesome\": \"~1.3.0\"\n\t}\n}</code>A developer runs this command: npm install.Which version of bar .awesome is installed?", 

"options": 

[{"option":"1.3.1"}, 

{"option":"1.3.5"}, 

{"option":"The command fails, because version 130 is not found"}, 

{"option":"1.4.0"}], 

"answers":[2] 

}, { 

"question":"Refer to the code below:<code>function changeValue(obj) {\n\tobj.value = obj.value/2;\n}\n\nconst objA = (value: 10);\nconst objB = objA;\nchangeValue(objB);\nconst result = objA.value;</code>What is the value of the result after the code executes?", 

"options": 

[{"option":"NaN"}, 

{"option":"undefined"}, 

{"option":"5"}, 

{"option":"10"}], 

"answers":[3] 

}, { 

"question":"Universal Containers (UC) just launched a new landing page, but users complain that the website is slow. A developer found some functions any that might cause this problem. To verify this, the developer decides to execute everything and log the time each of these three suspicious functions consumes. Which function can the developer use to obtain the time spent by every one of the three functions?<code>console.time('Performance');\nmaybeAHeavyFunction();\nthisCouldTakeTooLong();\norMaybeThisOne();\nconsole.endTime('Performance');</code>", 

"options": 

[{"option":"console.timeStamp()"}, 

{"option":"console.trace()"}, 

{"option":"console.getTime()"}, 

{"option":"console.timeLog()"}], 

"answers":[4] 

}, { 

"question":"Refer to the code below:<code>var str = \"javascript\";\nstr[0] = \"J\";\nstr[4] = \"S\";</code>After changing the string index values, the value of str is \"javascript\" .What is the reason for this value:", 

"options": 

[{"option":"Non-primitive values are mutable."}, 

{"option":"Non-primitive values are immutable."}, 

{"option":"Primitive values are mutable."}, 

{"option":"Primitive values are immutable."}], 

"answers":[4] 

}, { 

"question":"Refer to the code snippet below:<code>let array = [1, 2, 3, 4, 4, 5, 4, 4];\nfor (let i =0; i < array.length; i++){\n\tif (array[i] === 4) {\n\t\tarray.splice(i, 1);\n\t}\n}</code>What is the value of the array after the code executes?", 

"options": 

[{"option":"[1, 2, 3, 4, 5, 4, 4]"}, 

{"option":"[1, 2, 3, 4, 4, 5, 4]"}, 

{"option":"[1, 2, 3, 4, 5, 4]"}, 

{"option":"[1, 2, 3, 5]"}], 

"answers":[3],
"favorite":true

}, { 

"question":"Given the code below:<code>const delay = async delay =>{\n\treturn new Promise((resolve,reject)=>{\n\t\tconsole.log(1);\n\t\tsetTimeout(resolve,delay);\n\t});\n};\n\nconst callDelay = async ()=>{\n\tconsole.log(2);\n\tconst yup = await delay(1000);\n\tconsole.log(3);\n}\nconsole.log(4);\ncallDelay();\nconsole.log(5);</code>What is logged to the console?", 

"options": 

[{"option":"4 2 1 3 5"}, 

{"option":"4 5 2 3 1"}, 

{"option":"4 2 1 5 3"}, 

{"option":"4 5 2 1 3"}], 

"answers":[3] 

}, { 

"question":"Refer to the code below:<code>let timeFunction =() => {\n\tconsole.log('Timer called.');\n};\nlet timerId = setTimeout (timedFunction, 1000);</code>Which statement allows a developer to cancel the scheduled timed function?", 

"options": 

[{"option":"clearTimeout(timedFunction);"}, 

{"option":"removeTimeout(timerId);"}, 

{"option":"clearTimeout(timerId);"}, 

{"option":"removeTimeout(timedFunction);"}], 

"answers":[3] 

}, { 

"question":"Refer to the code below:<code>const searchText = 'Yay! Salesforce is amazing!';\nlet result1 = searchText.search(/sales/i);\nlet result21 = searchText.search(/sales/);\nconsole.log(result1);\nconsole.log(result2);</code>After running this code, which result is displayed on the console?", 

"options": 

[{"option":"&gt; true &gt; false"}, 

{"option":"&gt; 5 &gt; undefined"}, 

{"option":"&gt; 5 &gt; -1"}, 

{"option":"&gt; 5 &gt; 0"}], 

"answers":[2] 

},{ 

"question":"Given the following Animal constructor:<code>function Animal(size, age) {\n\tthis.size = size;\n\tthis.age = age;\n\tthis.canTalk = false;\n}</code>Which method creates a new instance of the object?", 

"options": 

[{"option":"Object.create('Animal');","explanation":"The create method needs the object name without quotes."}, 

{"option":"new Animal('large', 10);","explanation":"This creates a new instance of Animal with size and age arguments."}, 

{"option":"Object.prototype(Animal);.","explanation":"This is an incorrect way to use a prototype. Prototypes are used to add methods to existing constructors."}, 

{"option":"Object.new(Animal);","explanation":"This is not the correct way to use the new keyword. It is not a method."}], 

"answers":[2] 

}, { 

"question":"Given two nested divs and the code below:<code>window.onload = (event) => {\n\tdocument.querySelector('.outerDiv') .addEventListener('click', displayOuterMessage, true);\n\tdocument.querySelector('.innerDiv').addEventListener('click', displayInnerMessage, true);\n};</code>What order will the event listeners be called when the innerDiv is clicked?", 

"options": 

[{"option":"displayInnerMessage, displayOuterMessage","explanation":"Events in the target phase will trigger all listeners on an element in the order they were registered."}, 

{"option":"displayInnerMessage only","explanation":"Both event listeners will get called."}, 

{"option":"displayOuterMessage only","explanation":"Both event listeners will get called."}, 

{"option":"displayOuterMessage, displayInnerMessage","explanation":"Events in the target phase will trigger all listeners on an element in the order they were registered."}],  

"answers":[4] 

}, { 

"question":"Refer to this code:<code>const p1 = new Promise((resolve, reject) => {\n\tsetTimeout(() => { resolve('P1 Resolved'); }, 1500);\n});\nconst p2 = (data) => new Promise((resolve, reject) => {\n\tsetTimeout(() => resolve('${data}, P2 Resolved'), 1500, data);\n});</code>Which two answers correctly execute p1 and p2?", 

"options": 

[{"option":"p1.then((data) =&gt; p2(data)).then(result =&gt; result);","explanation":"The method promise.then() is used to associate further action with a promise that becomes settled."}, 

{"option":"async function getResult() {\n\tconst data = await p1;\n\treturn await p2(data);\n}\ngetResult();","explanation":"Using await inside the function causes both to execute."}, 

{"option":"p1().then(function() { p2().then(function(result) { return result; }); });","explanation":"The syntax is wrong for calling p1 and p2."}, 

{"option":"async function getResult() {\n\tconst data = p1;\n\tconst result = p2(data);\n}\nawait getResult();","explanation":"The await is outside the function calling the data."}], 

"answers":[1,2] 

}, { 

"question":"<code>const getId = new Promise((resolve, reject) => {\n\tsetTimeout(() => resolve(15), 1500);\n});\n\nconst getBook = bookId => new Promise((resolve, reject) => {\n\tsetTimeout(() => resolve('${bookId}:JavaScript Algorithms'), 1500);\n});\n\ngetId.then(id => getBook(id)).then(data => data);</code>What is the correct code to replace the last line with an async/await function?", 

"options": 

[{"option":"async function getBookInfo() {\n\tconst Id = await getId;\n\tconst result = await getBook(id);\n}\ngetBookInfo();","explanation":"Correct use of await with an async function. The await expression is always inside an async function."}, 

{"option":"async function getBookInfo() {\n\tconst Id = await getId;\n\tconst result = await getBook(id);\n}\nawait getBookInfo();","explanation":"Extra await calling getBookInfo() not necessary."}, 

{"option":"await function getBookInfo() {\n\tconst Id = getId;\n\tconst result = getBook(id);\n}\nasync getBookInfo();","explanation":"Wrong use of await and async to get info. The await expression is always inside an async function."}, 

{"option":"async function getBookInfo() {\n\tconst Id = getId;\n\tconst result = getBook(id);\n}\nawait getBookInfo();","explanation":"Wrong use of await and async to get info. The await expression is always inside an async function."}], 

"answers":[1] 

}, { 

"question":"Which code does the developer need to add to line 03 to receive incoming request data?<code>const https = require('https');\nconst server = https.createServer((req, res) => {\n\t// code goes here\n\t\tlet reqData = JSON.parse(chunk);\n\t\tconsole.log(reqData);\n\t});\n\tres.end('OK');\n});\nserver.listen(8000);</code>", 

"options": 

[{"option":"req.on('data', (chunk) =&gt; {","explanation":"The chunk argument is passed in for JSON.parse to use"}, 

{"option":"req.get((chunk) =&gt; {","explanation":"The get method is used with http requests"}, 

{"option":"req.data((chunk) =&gt; {","explanation":"Data is what is getting passed in, not a method"}, 

{"option":"req.on('get', (chunk) =&gt; {","explanation":"The get argument is not passed in so can not be used this way"}], 

"answers":[1] 

}, { 

"question":"Here is the package.json for the bar.awesome module:\n\n{\"name\": \"bar.awesome\",\"version\": \"1.3.5\",\"peerDependencies\": { \"baz\": \"5.x\" }}\n\nA particular project has the package.json definition below. \n\n{\"name\": \"UC Project Extra\",\"version\": \"0.0.5\",\"dependencies\": { \"bar.awesome\": \"1.3.5\", \"baz\": \"6.0.0\" }}\n\nWhat happens when a developer executes npm install?", 

"options": 

[{"option":"The command fails because bar.awesome does not have any dependency.","explanation":"bar does have a dependency on baz."}, 

{"option":"The command fails because bar versions are not compatible.","explanation":"The bar versions are compatible, but the baz versions are not."}, 

{"option":"The command succeeds but displays a warning about a version mismatch.","explanation":"There is a mismatch on the baz dependency that causes the warning."}, 

{"option":"The command succeeds with no errors or warnings.","explanation":"The command does succeed but there is a warning for the mismatched baz dependency."}], 

"answers":[3] 

}, { 

"question":"What are the two main properties of an error object that's passed as an argument to catch in a try...catch construct?", 

"options": 

[{"option":"name and stacktrace","explanation":"While name is correct, stacktrace isn't."}, 

{"option":"title and message","explanation":"The error object does not have a title property."}, 

{"option":"title and stack","explanation":"The error object does not have a title property and stack is a nonstandard property"}, 

{"option":"name and message","explanation":"Both name and message are main properties."}], 

"answers":[4] 

}, { 

"question":"A developer wants to set a breakpoint in his code while in the editor so they don't have to switch to the browser. What is the in-line command for setting a breakpoint?", 

"options": 

[{"option":"break","explanation":"The break statement is used in switch statements or loops."}, 

{"option":"debugger","explanation":"The debugger command will cause a breakpoint."}, 

{"option":"debug","explanation":"Debug is not a command."}, 

{"option":"breakpoint","explanation":"Breakpoint is not a command."}], 

"answers":[2], 

"favorite":true 

}, { 

"question":"Given the code below:<code>let res = sumArr([2,3,4]);</code>Which of the following code lines will assert the sumArr method adds the numbers in the array passed in?", 

"options": 

[{"option":"console.assert(res === 9);","explanation":"The console.assert method writes an error message to the console if the assertion is false. If the assertion is true, nothing happens."}, 

{"option":"console.log(res === 9);","explanation":"The console.log method will write whatever is passed in to the console."}, 

{"option":"console.assert(res != 9);","explanation":"This console.assert will return false. It should be written to return true so it will only display in the console when it is false."}, 

{"option":"console.error(res !=9);","explanation":"The console.error method will write whatever is passed in to the console as an error."}], 

"answers":[1] 

}, { 

"question":"Given the code below:<code>let res = sum3([1, 2, 3]);\nconsole.assert(res === 6);</code>The sum3 method gets updated to multiply the numbers instead of adding them. Line 02 is now a falsepositive assertion. How can the test be changed to fix it?", 

"options": 

[{"option":"01 let res = sum3([1, 2, 3, 4]);\n02 console.assert(res === 10);","explanation":"Since the method now multiplies the numbers, 10 is not correct."}, 

{"option":"01 let res = sum3([1, 2]);\n02 console.assert(res === 3);","explanation":"Even by reducing the numbers, the result is still a multiplication of the numbers resulting in 2 as the result."}, 

{"option":"01 let res = sum3([1, 2, 3, 4]);\n02 console.assert(res === 24);", "explanation": "Adding another number in the sequence ensures the result is different if added or multiplied."}, 

{"option":"01 let res = sum3([3, 2, 1]);\n02 console.assert(res === 6);","explanation":"Just changing the arrangement of the numbers doesn't change the result being the same for both adding them and multiplying them."}], 

"answers":[3] 

}, { 

"question":"A developer has an is Dog function that takes one argument cat. They want to schedule the function to run every minute. What is the correct syntax for scheduling this function?", 

"options": 

[{"option":"setInterval(isDog, 10000,'cat');"}, 

{"option":"setInterval(isDog, 50000,'cat');"}, 

{"option":"setInterval(isDog, 60000,'cat');"}, 

{"option":"setInterval(isDog, 1000,'cat');"}], 

"answers":[3] 

}, { 

"question":"A developer has an ErrorHandler module that contains multiple functions. What kind of export should be leveraged so that multiple functions can be used?", 

"options": 

[{"option":"all"}, 

{"option":"named"}, 

{"option":"multi"}, 

{"option":"default"}], 

"answers":[2],
"favorite":true

}, { 

"question":"A developer is working on an ecommerce website where the delivery date is dynamically calculated based on the current day. The code line below is responsible for this calculation.<code>const deliveryDate = new Date (); </code>Due to changes in the business requirements, the delivery date must now be today's date + 9 days. Which code meets this new requirement?", 

"options": 

[{"option":"deliveryDate.setDate((new Date()).getDate() + 9);"}, 

{"option":"deliveryDate.setDate(Date.current () + 9);"}, 

{"option":"deliveryDate.date = new Date(+9) ;"}, 

{"option":"deliveryDate.date = Date.current () + 9;"}], 

"answers":[1] 

}, { 

"question":"A test has a dependency on database.query. During the test the dependency is replaced with an object called database with the method, query, that returns an array. The developer needs to verify how many times the method was called and the arguments used each time.", 

"options": 

[{"option":"Integration"}, 

{"option":"Black box"}, 

{"option":"White box"}, 

{"option":"Mocking"}], 

"answers":[3,4] 

}, { 

"question":"Refer to the code below: <code>new Promise((resolve, reject) => {\n\tconst fraction = Math.random();\n\tif(fraction > 0.5) reject(\"fraction > 0.5, \" + fraction);\n\tresolve(fraction);\n})\n.then(() => console.log(\"resolved\"))\n.catch((error) => console.error(error))\n.finally(() => console.log(\" when am I called?\"));</code>When does Promise.finally on line 08 get called?", 

"options": 

[{"option":"When resolved"}, 

{"option":"When rejected"}, 

{"option":"When resolved and settled"}, 

{"option":"When resolved or rejected"}], 

"answers":[4] 

}, { 

"question":"Refer to the code below:<code>let str = 'javascript';\nstr[0] = 'J';\nstr[4] = 'S';</code>After changing the string index values, the value of str is 'javascript'. What is the reason for this value?", 

"options": 

[{"option":"Non-primitive values are mutable."}, 

{"option":"Non-primitive values are immutable."}, 

{"option":"Primitive values are mutable."}, 

{"option":"Primitive values are immutable."}], 

"answers":[4] 

}, { 

"question":"Refer to the code below:<code>const exec = (item, delay) => new Promise(resolve => setTimeout( () => resolve(item), delay));\n\nasync function runParallel(){\n\tconst [result1, result2, result3] = await Promise.all([exec('x', '100'), exec('y', '500'), exec('z', '100')]);\n\treturn `parallel is done: $(result1)$(result2)$(result3)`;\n}</code>Which two statements correctly execute the runParallel() function? Choose 2 answers", 

"options": 

[{"option":"async runParallel().then(data);"}, 

{"option":"runParallel().done(function(data){\n\treturn data;\n});"}, 

{"option":"runParallel().then(data);"}, 

{"option":"runParallel().then(function(data){\n\treturn data;\n});"}], 

"answers":[2,4],
"favorite":true

}, { 

"question":"Refer to the code below:<code>const pi = 3.1415326;</code>What is the data type of pi?", 

"options": 

[{"option":"Double"}, 

{"option":"Number"}, 

{"option":"Decimal"}, 

{"option":"Float"}], 

"answers":[2] 

}, { 

"question":"Refer to the code below:<code>let textValue = '1984';</code>Which code assignment shows a correct way to convert this string to an integer?", 

"options": 

[{"option":"let numberValue = Integer(textValue);"}, 

{"option":"let numberValue = Number(textValue);"}, 

{"option":"let numberValue = textValue.toInteger();"}, 

{"option":"let numberValue = (Number)textValue;"}], 

"answers":[2] 

}, { 

"question":"Which statement parses successfully?", 

"options": 

[{"option":"JSON.parse(\" 'foo' \");"}, 

{"option":"JSON.parse (\"foo\");"}, 

{"option":"JSON.parse ('foo');"}, 

{"option":"JSON.parse(' \"foo\" ');"}], 

"answers":[4] 

}, { 

"question":"Refer to the code below:<code>function changeValue(param) {\n\tparam = 5;\n}\nlet a = 10;\nlet b = a;\nchangeValue(b);\nconst result = a + \" - \" + b;</code>What is the value of result when code executes?", 

"options": 

[{"option":"5 - 5"}, 

{"option":"10 - 10"}, 

{"option":"10 - 5"}, 

{"option":"5 - 10"}], 

"answers":[2] 

}, { 

"question":"Refer to following code block:<code>let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nlet output =0;\nfor (let num of array) {\n\tif (output > 10) { break; }\n\tif (num % 2 == 0) { continue; }\n\toutput += num;\n}</code>What is the value of output after the code executes?", 

"options": 

[{"option":"16"}, 

{"option":"36"}, 

{"option":"11"}, 

{"option":"25"}], 

"answers":[1] 

}, { 

"question":"A developer writes the code below to calculate the factorial of a given number.<code>function factorial(number) {\n\treturn number + factorial(number -1);\n}\nfactorial(3);</code>What is the result of executing line 04?", 

"options": 

[{"option":"0"}, 

{"option":"6"}, 

{"option":"-Infinity"}, 

{"option":"RuntimeError"}], 

"answers":[4] 

}, { 

"question":"Refer to following code:<code>class Vehicle {\n\tconstructor(plate) {\n\t\tthis.plate = plate;\n\t}\n}\n\nclass Truck extends Vehicle {\n\tconstructor(plate, weight) {\n\t\t// Missing code\n\t\tthis.weight = weight;\n\t}\n\tdisplayWeight() {\n\t\tconsole.log(`The truck ${this.plate} has a weight of ${this.weight} lb`');\n\t}\n}\n\nlet myTruck = new Truck('123AB', 5000);\nmyTruck.displayWeight();</code>Which statement should be added to line 09 for the code to display 'The truck 123AB has a weight of 5000 lb.'?", 

"options": 

[{"option":"super.plate = plate;"}, 

{"option":"super(plate);"}, 

{"option":"this.plate = plate;"}, 

{"option":"Vehicle.plate = plate;"}], 

"answers":[2],
"favorite":true

}, { 

"question":"Refer to the following array:<code>let arr = [1, 2, 3, 4, 5];</code>Which three options result in x evaluating as [3, 4, 5]? Choose 3 answers.", 

"options": 

[{"option":"let x = arr.filter ((a) =&gt; (a &lt; 2));"}, 

{"option":"let x = arr.splice(2,3);"}, 

{"option":"let x = arr.slice(2);"}, 

{"option":"let x = arr.filter((a) =&gt; ( return a &gt; 2 ));"}, 

{"option":"let x = arr.slice(2,3);"}], 

"answers":[2,3,4],
"favorite":true

}, { 

"question":"A developer wants to leverage a module to print a price in pretty format, and has imported a method as shown below:<code>import printPrice from '/path/PricePrettyPrint.js';</code>Based on the code, what must be true about the printPrice function of the PricePrettyPrint module for this import to work?", 

"options": 

[{"option":"printPrice must be be a named export"}, 

{"option":"printPrice must be an all export"}, 

{"option":"printPrice must be the default export"}, 

{"option":"printPrice must be a multi export"}], 

"answers":[3] 

}, { 

"question":"Refer to the code below:<code>let car1 = new Promise((_, reject) => setTimeout(reject, 2000, \"Car 1 crashed in\"));\nlet car2 = new Promise(resolve => setTimeout(resolve, 1500, \"Car 2 completed\"));\nlet car3 = new Promise(resolve => setTimeout (resolve, 3000, \"Car 3 Completed\"));\nPromise.race([car1, car2, car3])\n.then(value => {\n\tlet result = `${value} the race.`;\n})\n.catch(err => {\n\tconsole.log(\"Race is canceled.\", err);\n});</code>What is the value of result when Promise.race executes? ", 

"options": 

[{"option":"Car 3 completed the race."}, 

{"option":"Car 1 crashed in the race."}, 

{"option":"Car 2 completed the race."}, 

{"option":"Race is canceled."}], 

"answers":[3], 

"favorite":true 

}, { 

"question":"A developer at Universal Containers is creating their new landing page based on HTML, CSS, and JavaScript. The website includes multiple external resources that are loaded when the page is opened. To ensure that visitors have a good experience, a script named personalizeWebsiteContent needs to be executed when the webpage Is loaded and there Is no need to wait for the resources to be available. Which statement should be used to call personalizeWebsiteContent based on the above business requirement?", 

"options": 

[{"option":"windows,addEventListener('load', personalizeWebsiteContent);"}, 

{"option":"windows,addEventListener('DOMContent Loaded ', personalizeWebsiteContent);"}, 

{"option":"windows,addEventListener('onload', personalizeWebsiteContent);"}, 

{"option":"windows,addEventListener('onDOMCContentLoaded', personalizeWebsiteContent);"}], 

"answers":[1] 

}, { 

"question":"Refer to the code below:<code>let o = {\n\tget js() {\n\t\tlet city1 = String(\"st. Louis\");\n\t\tlet city2 = String(\"New York\");\n\t\treturn {\n\t\t\tfirstCity: city1.toLowerCase(),\n\t\t\tsecondCity: city2.toLowerCase()\n\t\t}\n\t}\n}</code>What value can a developer expect when referencing o.js.secondCity?", 

"options": 

[{"option":"Undefined"}, 

{"option":"'new york'"}, 

{"option":"'New York'"}, 

{"option":"An error"}], 

"answers":[2] 

}, { 

"question":"A developer creates an object where its properties should be immutable and prevent properties from being added or modified. Which method should be used to execute this business requirement?", 

"options": 

[{"option":"Object.const()"}, 

{"option":"Object.eval()"}, 

{"option":"Object.lock()"}, 

{"option":"Object.freeze()"}], 

"answers":[4] 

}, { 

"question":"Given the code below:<code>function GameConsole (name) {\n\tthis.name = name;\n}\nGameConsole.prototype.load = function(gamename) {\n\tconsole.log(`$(this.name) is loading a game : $(gamename)...`);\n}\nfunction Console16bit (name) {\n\tGameConsole.call(this, name);\n}\nConsole16bit.prototype = Object.create ( GameConsole.prototype);\n// insert code here\n\tconsole.log(`${this.name} is loading a cartridge game : ${gamename}...`);\n}\nconst console16bit = new Console16bit(\"SNEGeneziz\");\nconsole16bit.load(\"Super Nonic 3x Force\");</code>What should a developer insert to output the following message using the method? > SNEGeneziz is loading a cartridge game: Super Monic 3x Force...", 

"options": 

[{"option":"Console16bit.prototype.load(gamename) = function() {"}, 

{"option":"Console16bit.prototype.load = function(gamename) {"}, 

{"option":"Console16bit = Object.create(GameConsole.prototype).load = function (gamename) {"}, 

{"option":"Console16bit.prototype.load(gamename) {"}], 

"answers":[2] 

}, { 

"question":"A developer has the following array of student test grades:<code>let arr = [ 7, 8, 5, 8, 9 ];</code>The Teacher wants to double each score and then see an array of the students who scored more than 15 points. How should the developer implement the request? ", 

"options": 

[{"option":"let arr1 = arr.filter((val) =&gt; ( return val &gt; 15 )) .map(( num) =&gt; ( return num * 2 ))"}, 

{"option":"let arr1 = arr.mapBy (( num) =&gt; ( return num * 2 )) .filterBy(( val ) =&gt; return val &gt; 15 )) ;"}, 

{"option":"let arr1 = arr.map((num) =&gt; num * 2).filter((val) =&gt; val &gt; 15);"}, 

{"option":"let arr1 = arr.map((num) =&gt; ( num * 2)).filterBy((val) =&gt; ( val &gt;15 ));"}], 

"answers":[3] 

},{ 

"question":"In which situation should a developer include a try .. catch block around their function call?", 

"options": 

[{"option":"The function has an error that should not be silenced."}, 

{"option":"The function results in an out of memory issue."}, 

{"option":"The function might raise a runtime error that needs to be handled."}, 

{"option":"The function contains scheduled code."}], 

"answers":[3] 

}, { 

"question":"Which statement accurately describes the behavior of the async/ await keywords?", 

"options": 

[{"option":"The associated class contains some asynchronous functions."}, 

{"option":"The associated function will always return a promise"}, 

{"option":"The associated function can only be called via asynchronous methods"}, 

{"option":"The associated sometimes returns a promise."}], 

"answers":[2] 

},{ 

"question":"A developer is trying to convince management that their team will benefit from using Node.js for a backend server that they are going to create. The server will be a web server that handles API requests from a website that the team has already built using HTML, CSS, and JavaScript. Which three benefits of Node.js can the developer use to persuade their manager? Choose 3 answers:", 

"options": 

[{"option":"Installs with its own package manager to install and manage third-party libraries."}, 

{"option":"Ensures stability with one major release every few years."}, 

{"option":"Performs a static analysis on code before execution to look for runtime errors."}, 

{"option":"Executes server-side JavaScript code to avoid learning a new language."}, 

{"option":"User non blocking functionality for performant request handling."}], 

"answers":[1,3,5], 

"favorite":true 

},{ 

"question":"Which codestatement below correctly persists an object in local Storage?", 

"options": 

[{"option":"const setLocalStorage = (storageKey, jsObject) =&gt; { window.localStorage.setItem(storageKey, JSON.stringify(jsObject)); }"}, 

{"option":"const setLocalStorage = ( jsObject) =&gt; { window.localStorage.connectObject(jsObject)); }"}, 

{"option":"const setLocalStorage = ( jsObject) =&gt; { window.localStorage.setItem(jsObject); }"}, 

{"option":"const setLocalStorage = (storageKey, jsObject) =&gt; { window.localStorage.persist(storageKey, jsObject); }"}], 

"answers":[1] 

},{ 

"question":"Which javascript methods can be used to serialize an object into a string and deserialize a JSON string into an object, respectively?", 

"options": 

[{"option":"JSON.serialize and JSON.deserialize"}, 

{"option":"JSON.stringify and JSON.parse"}, 

{"option":"JSON.parse and JSON.deserialize"}, 

{"option":"JSON.encode and JSON.decode"}], 

"answers":[2] 

}, { 

"question":"A developer wants to define a function log to be used a few times on a single-fileJavaScript script.<code>// Line 01 replacement\n\tconsole.log('LOG:', logInput);\n}</code>Which two options can correctly replace line 01 and declare the function for use? Choose 2 answers", 

"options": 

[{"option":"function log(logInput) {"}, 

{"option":"const log(loginInput) {"}, 

{"option":"const log = (logInput) =&gt; {"}, 

{"option":"function log = (logInput) {"}], 

"answers":[1,3] 

}, { 

"question":"A developer wants to create an object from a function in the browser using the code below:<code>function Monster() { this.name = \"hello\" };\nconst z = Monster();</code>What happens due to lack of the new keyword on line 02?", 

"options": 

[{"option":"The z variable is assigned the correct object."}, 

{"option":"The z variable is assigned the correct object but this.name remains undefined."}, 

{"option":"window.name is assigned to \"hello\" and the variable z remains undefined."}, 

{"option":"window.m is assigned the correct object."}], 

"answers":[3] 

}, { 

"question":"A developer uses a parsed JSON string to work with userInformation as in the block below:<code>const userInformation = {\n\t\"id\": \"user-01\",\n\t\"email\" : \"user01@universalcontainers.demo\",\n\t\"age\" : 25\n}</code>Which two options access the email attribute in the object? Choose 2 answers", 

"options": 

[{"option":"userInformation[\"email\"]"}, 

{"option":"userInformation.get(\"email\")"}, 

{"option":"userInformation.email"}, 

{"option":"userInformation(email)"}], 

"answers":[1,3] 

}, { 

"question":"Considering type coercion, what does the following expression evaluate to?<code>true + '13' + NaN</code>", 

"options": 

[{"option":"'113Nan'"}, 

{"option":"14"}, 

{"option":"'true13'"}, 

{"option":"'true13NaN'"}], 

"answers":[4] 

}, { 

"question":"Given the following code:<code>let x = null;\nconsole.log(typeof x);</code>What is the output of the line 02?", 

"options": 

[{"option":"\"object\""}, 

{"option":"\"x\""}, 

{"option":"\"undefined\""}, 

{"option":"\"null\""}], 

"answers":[1] 

}, { 

"question":"Refer to the code below:<code>let sayHello = () => {\n\tconsole.log ('Hello, world!');\n};</code>Which code executes sayHello once, two minutes from now?", 

"options": 

[{"option":"delay(sayHello, 12000);"}, 

{"option":"setTimeout(sayHello, 12000);"}, 

{"option":"setInterval(sayHello, 12000);"}, 

{"option":"setTimeout(sayHello(), 12000);"}], 

"answers":[2] 

},{ 

"question":"The developer wants to test the array shown:<code>const arr = Array(5).fill(0);</code>Which two tests are the most accurate for this array? Choose 2 answers:", 

"options": 

[{"option":"console.assert( arr.length === 5 );"}, 

{"option":"arr.forEach(elem =&gt; console.assert(elem === 0)) ;"}, 

{"option":"console.assert (arr.length &gt;0);"}, 

{"option":"console.assert(arr[0] === 0 &amp;&amp; arr[ arr.length] === 0);"}], 

"answers":[1,2],
"favorite":true

},{ 

"question":"Which function should a developer use to repeatedly execute code at a fixed interval?", 

"options": 

[{"option":"setPeriod"}, 

{"option":"setInteria"}, 

{"option":"setInterval"}, 

{"option":"setTimeout"}], 

"answers":[3] 

},{ 

"question":"Refer to the code below:<code>let greeting = \"Goodbye\";\nlet salutation = \"Hello, hello, hello\";\ntry {\n\tgreeting = \"Hello\";\n\tdecodeURI(\"%%%\"); // throws error\n\tsalutation = \"Goodbye\";\n} catch(err) {\n\tsalutation = \"I say hello\";\n} finally {\n\tsalutation = \"Hello, Hello\";\n}</code>Line 05 causes an error. What are the values of greeting and salutation once code completes?", 

"options": 

[{"option":"greeting is Hello and salutation is I say hello."}, 

{"option":"greeting is Goodbye and salutation is I say Hello."}, 

{"option":"greeting is Hello and salutation is Hello, Hello."}, 

{"option":"greeting is Goodbye and salutation is Hello, Hello."}], 

"answers":[3] 

}, { 

"question":"Universal Containers (UC) just launched a new landing page, but users complain that the website is slow. A developer found some functions that might cause this problem. To verify this, the developer decides to execute everything and log the time each of these three suspicious functions consumes. Which function can the developer use to obtain the time spent by every one of the three functions?<code>console.time(\"Performance\");\nmaybeAHeavyFunction();\nthisCouldTakeTooLong();\norMaybeThisOne();\nconsole.endTime(\"Performance\");</code>", 

"options": 

[{"option":"console.trace()"}, 

{"option":"console.getTime()"}, 

{"option":"console.timeLog()"}, 

{"option":"console.timeStamp()"}], 

"answers":[3] 

}, { 

"question":"Given the code below:<code>const copy = JSON.stringify([new String('false'), new Boolean(false), undefined]);</code>What is the value of copy?", 

"options": 

[{"option":"[ \\\"false\\\" , { } ]"}, 

{"option":"[ false, { } ]"}, 

{"option":"[ \\\"false\\\" ,false, null ]"}, 

{"option":"[ \\\"false\\\" , false, undefined ]"}], 

"answers":[3] 

}, { 

"question":"There is a new requirement for a developer to implement a currPrice method that will return the current price of the item or sales.<code>let regItem = new Item('Scarf', 50); // Name, Price\nlet saleItem = new SaleItem('Shirt', 80, .1); // Name, Price, Discount\nItem.prototype.currPrice = function(){ return this.price; }\nconsole.log(regItem.currPrice());\nconsole.log(saleItem.currPrice());\n\nSaleItem.prototype.currPrice = function(){ return this.price - (this.price * this.discount); }\nconsole.log(regItem.currPrice());\nconsole.log(saleItem.currPrice());</code>What is the output when executing the code above?", 

"options": 

[{"option":"50\nUncaught TypeError: saleItem.description is not a function\n50\n80"}, 

{"option":"50\n80\n50\n72"}, 

{"option":"50\n80\n72"}, 

{"option":"50\n80\nUncaught Reference Error: this.discount is undefined\n72"}], 

"answers":[2],
"favorite":true

}, { 

"question":"Refer to the code below:<code>const myFunction = arr => {\n\treturn arr.reduce((result, current) =>{\n\t\treturn result + current;\n\t}, 10);\n}</code>What is the output of this function when called with an empty array?", 

"options": 

[{"option":"returns 0"}, 

{"option":"Throws an error"}, 

{"option":"returns 10"}, 

{"option":"returns NaN"}], 

"answers":[3] 

},{ 

"question":"Refer to the expression below:<code>let x = ('1' + 2) == (6 + 2);</code>How should this expression be modified to ensure that a evaluated to false?", 

"options": 

[{"option":"let x = ('1' + '2') == (6 * 2);"}, 

{"option":"let x = ('1' + '2') === (6 * 2);"}, 

{"option":"let x = (1 + 2) == ('6' / 2);"}, 

{"option":"let x = (1 + 2) === (6 / 2);"}], 

"answers":[2] 

},{ 

"question":"A developer implements and calls the following code when an application state change occurs:<code>const onStateChange = (innerPageState) => {\n\twindow.history.pushState(newPageState, ' ', null);\n}</code>If the back button is clicked after this method is executed, what can a developer expect?", 

"options": 

[{"option":"A navigate event is fired with a state property that details the previous application state."}, 

{"option":"The page is navigated away from and the previous page in the browser's history is loaded."}, 

{"option":"The page reloads and all Javascript is reinitialized."}, 

{"option":"A popstate event is fired with a state property that details the application's last state."}], 

"answers":[2], 

"favorite":true 

}, { 

"question":"A developer wants to use a module named universalContainersLib and then call functions from it. How should a developer import every function from the module and then call the functions foo and bar?", 

"options": 

[{"option":"import * from '/path/universalContainersLib.js';\nuniversalContainersLib.foo();\nuniversalContainersLib.bar();"}, 

{"option":"import {foo,bar} from '/path/universalCcontainersLib.js';\nfoo();\nbar()"}, 

{"option":"import all from '/path/universalContainersLib.js';\nuniversalContainersLib.foo();\nuniversalContainersLib.bar ();"}, 

{"option":"import * as lib from '/path/universalContainersLib.js';\nlib.foo();\nlib.bar();"}], 

"answers":[4],
"favorite":true

},{ 

"question":"Which three actions can be using the JavaScript browser console? Choose 3 answers.", 

"options": 

[{"option":"View and change DOM the page."}, 

{"option":"Display a report showing the performance of a page."}, 

{"option":"Run code that is not related to page."}, 

{"option":"View, change, and debug the JavaScript code of the page."}, 

{"option":"View and change security cookies."}], 

"answers":[1,3,4] 

},{ 

"question":"Which three browser specific APIs are available for developers to persist data between page loads? Choose 3 answers.", 

"options": 

[{"option":"Cookies"}, 

{"option":"localStorage"}, 

{"option":"Global variables"}, 

{"option":"IIFEs"}, 

{"option":"indexedDB"}], 

"answers":[1,2,5] 

},{ 

"question":"Refer the code below:<code>x=3.14;\n\nfunction myFunction() {\n\t\"use strict\";\n\ty=x;\n}\nz=x;\nmyFunction();</code>Choose 3 answers", 

"options": 

[{"option":"Z is equal to 3.14"}, 

{"option":"Use strict has effect only on line 5."}, 

{"option":"Use strict has effect to all lines."}, 

{"option":"Line 5 throws an error"}, 

{"option":"No error appears"}], 

"answers":[1,2,4] 

}, { 

"question":"Refer to the code below:<code>console.log('Start');\nPromise.resolve('Success').then(function(value){\n\tconsole.log('Success');\n});\nconsole.log('End');</code>What is the output after the code executes successfully?", 

"options": 

[{"option":"Success\nStart\nEnd"}, 

{"option":"Start\nEnd\nSuccess"}, 

{"option":"End\nStart\nSuccess"}, 

{"option":"Start\nSuccess\nEnd"}], 

"answers":[2] 

}, { 

"question":"Refer to code below:<code>let productSKU = '8675309';</code>A developer has a requirement to generate SKU numbers that are always 19 characters long, starting with 'sku', and padded with zeros. Which statement assigns the values sku0000000008675309?", 

"options": 

[{"option":"productSKU = productSKU.padStart(19, '0').padstart('sku');"}, 

{"option":"productSKU = productSKU.padEnd(16, '0').padstart('sku');"}, 

{"option":"productSKU = productSKU.padEnd(16, '0').padstart(19, 'sku');"}, 

{"option":"productSKU = productSKU.padStart (16, '0').padStart(19, 'sku');"}], 

"answers":[4] 

}, { 

"question":"Refer to the HTML below:<code><ul><li>Leo</li><li>Tony</li><li>Tiger</li></ul></code>Which JavaScript statement results in changing 'Tony' to 'Mr. T.'?", 

"options": 

[{"option":"document.querySelectorAll('$main $TONY').innerHTML = 'Mr. T.';"}, 

{"option":"document.querySelector('$main li:second-child').innerHTML = 'Mr. T.';"}, 

{"option":"document.querySelector('$main li.Tony').innerHTML = 'Mr. T.';"}, 

{"option":"document.querySelector('$main li:nth-child(2)'),innerHTML = 'Mr. T.';"}], 

"answers":[4] 

}, { 

"question":"<code><html>\n\t<table onclick=\"console.log('Table log');\">\n\t\t<tr id='row1'>\n\t\t\t<td>Click me!</td>\n\t\t</tr>\n\t</table>\n\t<script>\n\tfunction printMessage(event){\n\t\tconsole.log('Row log');\n\t\tevent.stopPropagation();\n\t}\n\n\tlet elem = document.getElementById(\"row1\");\n\telem.addEventListener('click', printMessage, false);\n\t</script>\n</html></code>Which code change should be done for the console to log the following when 'Click me!' is clicked'<code>> Row log\n> Table log</code>", 

"options": 

[{"option":"Remove lines 13 and 14"}, 

{"option":"Change line 10 to event.stopPropagation(false);"}, 

{"option":"Change line 14 to elem.addEventListener('click', printMessage, true);"}, 

{"option":"Remove line 10"}], 

"answers":[4] 

}, { 

"question":"A developer copied a JavaScript object:<code>function Person() {\n\tthis.firstName = \"John\";\n\tthis.lastName = 'Doe';\n\tthis.name = () => `${this.firstName}, ${this.lastName}`;\n}\n\nconst john = new Person();\nconst dan = Object.assign(john);\ndan.firstName = 'Dan';</code>How does the developer access dan's firstName & lastName? Choose 2 answers", 

"options": 

[{"option":"dan.name"}, 

{"option":"dan.firstname() + dan.lastName()"}, 

{"option":"dan.firstName + dan.lastName"}, 

{"option":"dan.name()"}], 

"answers":[3,4] 

}, { 

"question":"Refer to the following code:<code>function Tiger(){\n\tthis.Type = 'Cat';\n\tthis.size = 'large';\n}\n\nlet tony = new Tiger();\ntony.roar = () =>{\n\tconsole.log('They're great1');\n};\n\nfunction Lion(){\n\tthis.type = 'Cat';\n\tthis.size = 'large';\n}\n\nlet leo = new Lion();\n//Insert code here\nleo.roar();</code>Which two statements could be inserted at line 17 to enable the function call on line 18? Choose 2 answers.", 

"options": 

[{"option":"leo.roar = () =&gt; { console.log('They're pretty good:'); };"}, 

{"option":"Object.assign(leo,Tiger);"}, 

{"option":"Object.assign(leo,tony);"}, 

{"option":"leo.prototype.roar = () =&gt; { console.log('They're pretty good:'); };"}], 

"answers":[1,3], 

"favorite": true 

}, { 

"question":"Given the JavaScript below:<code>function filterDOM(searchString) {\n\tconst parsedSearchString = searchString && searchString.toLowerCase();\n\tdocument.querySelectorAll('.account').forEach(account => {\n\t\tconst accountName = account.innerHTML.toLowerCase();\n\t\taccount.style.backgroundColor = accountName.includes(parsedSearchString) ?\n\t\t/* Insert code here */;\n\t});\n}</code>Which code should replace the placeholder comment on line 06 to hide accounts that do not match the search string?", 

"options": 

[{"option":"'yellow: null"}, 

{"option":"null : 'yellow'"}, 

{"option":"'none' : 'yellow'"}, 

{"option":"'yellow' : 'none'"}], 

"answers":[4] 

}, { 

"question":"Which three code segments result in a correct conversion from number to string? Choose 3 answers", 

"options": 

[{"option":"let strValue = numValue.toString();"}, 

{"option":"let strValue = \"\" + numValue;"}, 

{"option":"let strValue = numValue.toText();"}, 

{"option":"let strValue = String(numValue);"}, 

{"option":"let strValue = (String)numValue;"}], 

"answers":[1,2,4],
"favorite":true

}, { 

"question":"Refer to the code snippet:<code>function getAvailabilityMessage(item){\n\tif(getAvailability(item)){\n\t\tvar msg = 'Username available';\n\t}\n\treturn msg;\n}</code>A developer writes this code to return a message to a user attempting to register a new username. If the username is available, variable. What is the return value of msg when getAvailabilityMessage('newUserName') is executed and getAvailability('newUserName') returns true?", 

"options": 

[{"option":"\"Username available\""}, 

{"option":"\"newUserName\""}, 

{"option":"\"Msg is not defined\""}, 

{"option":"Undefined"}], 

"answers":[1] 

}, { 

"question":"<code>function Person(firstName, lastName, eyeColor) {\n\tthis.firstName = firstName;\n\tthis.lastName = lastName;\n\tthis.eyeColor = eyeColor;\n}\n\nPerson.job = 'Developer';\nconst myFather = new Person('John', 'Doe');\nconsole.log(myFather.job);</code>What is the output after the code executes?", 

"options": 

[{"option":"ReferenceError: eyeColor is not defined"}, 

{"option":"ReferenceError: assignment to undeclared variable \"Person\""}, 

{"option":"Developer"}, 

{"option":"Undefined"}], 

"answers":[4], 

"favorite": true 

}, { 

"question":"A developer wants to use a try...catch statement to catch any error that countSheep() may throw and pass it to a handleError() function. What is the correct implementation of the try...catch?", 

"options": 

[{"option":"try {\n\tsetTimeout(function(){\n\t\tcountSheep();\n\t}, 1000);\n} catch(e) {\n\thandleError(e);\n}"}, 

{"option":"try {\n\tcountSheep();\n} finally {\n\thandleError(e);\n}"}, 

{"option":"setTimeout(function(){\n\ttry {\n\t\tcountSheep();\n\t} catch(e) {\n\t\thandleError(e);\n\t}\n}, 1000);"}, 

{"option":"try {\n\tcountSheep();\n} handleError(e) {\n\tcatch(e);\n}"}], 

"answers":[1], 

"favorite": true 

}, { 

"question":"A developer removes the HTML class attribute from the checkout button, so now it is simply: <button>Checkout</button>. There is a test to verify the existence of the checkout button, however it looks for a button with class= \"blue\". The test fails because no such button is found. Which type of test category describes this test?", 

"options": 

[{"option":"True positive","explanation":"the code is correct and the test passes"}, 

{"option":"True negative","explanation":"the code fails and the test fails"}, 

{"option":"False positive","explanation":"code is broken but the test passes"}, 

{"option":"False negative","explanation":"code is correct but the test fails"}], 

"answers":[4],
"favorite":true

}, { 

"question":"Which three statements are true about promises? Choose 3 answers.", 

"options": 

[{"option":"The executor of a new Promise runs automatically."}, 

{"option":"A Promise has a .then() method."}, 

{"option":"A fulfilled or rejected promise will not change states."}, 

{"option":"A settled promise can become resolved."}, 

{"option":"A pending promise can become fulfilled, settled, or rejected."}], 

"answers":[2,3,5], 

"favorite": true 

}, { 

"question":"A developer wrote the following code:<code>let X = object.value;\ntry {\n\thandleObjectValue(X);\n} catch (error) {\n\thandleError(error);\n}</code>The developer has a getNextValue function to execute after handleObjectValue(), but does not want to execute getNextValue() if an error occurs. How can the developer change the code to ensure this behavior?", 

"options": 

[{"option":"try {\n\thandleObjectValue(X);\n\tgetNextValue();\n} catch (error) {\n\thandleError(error);\n}"}, 

{"option":"try {\n\thandleObjectValue(X);\n} catch (error) {\n\thandleError(error);\n}\ngetNextValue();"}, 

{"option":"try {\n\thandleObjectValue(X);\n} catch (error) {\n\thandleError(error);\n}\nfinally {\n\tgetNextValue();\n}"}, 

{"option":"try {\n\thandleObjectValue(X);\n} catch (error) {\n\thandleError(error);\n}\nthen {\n\tgetNextValue();\n}"}], 

"answers":[1] 

}, { 

"question":"Given the requirement to refactor the code above to JavaScript class format, which class definition is correct?<code>function Vehicle(name, price) {\n\tthis.name = name;\n\tthis.price = price;\n}\nVehicle.prototype.priceInfo = function(){\n\treturn 'Cost of the $(this.name) is $(this.price)$';\n}\nvar ford = new Vehicle('Ford Fiesta', '20,000');</code>A)<code>class Vehicle {\n\tconstructor(name, price) {\n\t\tthis.name = name;\n\t\tthis.price = price;\n\t}\n\tpriceInfo() {\n\t\treturn 'Cost of the $(this.name) is $(this.price)$';\n\t}\n}</code>B)<code>class Vehicle {\n\tvehicle(name, price) {\n\t\tthis.name = name;\n\t\tthis.price = price;\n\t}\n\tpriceInfo() {\n\t\treturn 'Cost of the $(this.name) is $(this.price)$';\n\t}\n}</code>C)<code>class Vehicle {\n\tconstructor(name, price) {\n\t\tname = name;\n\t\tprice = price;\n\t}\n\tpriceInfo() {\n\t\treturn 'Cost of the $(this.name) is $(this.price)$';\n\t}\n}</code>D)<code>class Vehicle {\n\tconstructor() {\n\t\tthis.name = name;\n\t\tthis.price = price;\n\t}\n\tpriceInfo() {\n\t\treturn 'Cost of the $(this.name) is $(this.price)$';\n\t}\n}</code>", 

"options": 

[{"option":"Option A"}, 

{"option":"Option B"}, 

{"option":"Option C"}, 

{"option":"Option D"}], 

"answers":[1] 

}, { 

"question":"Refer to the code below:<code>let country = {\n\tget capital() {\n\t\tlet city = Number('London');\n\t\treturn {\n\t\t\tcityString: city.toString()\n\t\t}\n\t}\n}</code>Which value can a developer expect when referencing country.capital.cityString?", 

"options": 

[{"option":"'London'"}, 

{"option":"undefined"}, 

{"option":"An error"}, 

{"option":"'NaN'"}], 

"answers":[4] 

}, { 

"question":"Given the following code:<code>counter = 0;\nconst logCounter = () => { console.log(counter); };\nlogCounter();\nsetTimeout(logCounter, 2100);\nsetInterval(()=> {\n\tcounter++;\n\tlogCounter();\n}, 1000);</code>What will be the first four numbers logged?", 

"options": 

[{"option":"0012"}, 

{"option":"0112"}, 

{"option":"0122"}, 

{"option":"0123"}], 

"answers":[3], 

"favorite": true 

}, { 

"question":"A developer wants to create a simple image upload in the browser using the File API. The HTML is below:<code><input type='file' onchange='previewFile()'>\n<img src='' height='200' alt='Image Preview...'/></code>The JavaScript portion is:<code>function previewFile(){\n\tconst preview = document.querySelector('img');\n\tconst file = document.querySelector('input[type=file]').files[0];\n\t//line 4 code\n\treader.addEventListener(\"load\", () => {\n\t\tpreview.src = reader.result;\n\t},false);\n\t//line 8 code\n}</code>In lines 04 and 08, which code allows the user to select an image from their local computer, and to display the image in the browser?", 

"options": 

[{"option":"04 const reader = new File();\n08 if (file) URL.createObjectURL(file);"}, 

{"option":"04 const reader = new FileReader();\n08 if (file) URL. createObjectURL(file);"}, 

{"option":"04 const reader = new File();\n08 if (file) reader.readAsDataURL(file);"}, 

{"option":"04 const reader = new FileReader();\n08 if (file) reader.readAsDataURL(file);"}], 

"answers":[4] 

}, { 

"question":"Given the following code, what is the value of x?<code>let x = ('15' + 10) * 2;</code>", 

"options": 

[{"option":"50"}, 

{"option":"3020"}, 

{"option":"35"}, 

{"option":"1520"}], 

"answers":[2] 

}, { 

"question":"Refer to the following code block:<code>class Student {\n\tconstructor(name) {\n\t\tthis.name = name;\n\t}\n\n\ttakeTest(){\n\t\tconsole.log(`$(this.name) got 70% on test.`);\n\t}\n}\n\nclass BetterStudent extends Student {\n\tconstructor(name) {\n\t\tsuper(name);\n\t\tthis.name = 'Better student ' + name;\n\t}\n\n\ttakeTest(){\n\t\tconsole.log(`$(this.name) got 100% on test.`);\n\t}\n}\n\nlet student = new BetterStudent('Jackie');\nstudent.takeTest();</code>What is the console output?", 

"options": 

[{"option":"Better student Jackie got 70% on test."}, 

{"option":"Jackie got 70% on test."}, 

{"option":"Uncaught Reference Error"}, 

{"option":"Better student Jackie got 100% on test."}], 

"answers":[4] 

}, { 

"question":"A developer creates a generic function to log custom messages in the console. To do this, the function below is implemented.<code>function logStatus(status){\n\tconsole./*Answer goes here*/(\"Item status is: %s\", status);\n}</code>Which three console logging methods allow the use of string substitution in line 02?", 

"options": 

[{"option":"assert"}, 

{"option":"log"}, 

{"option":"message"}, 

{"option":"info"}, 

{"option":"error"}], 

"answers":[2,4,5],
"favorite":true

}, { 

"question":"Which two code snippets show working examples of a recursive function? Choose 2 answers", 

"options": 

[{"option":"let countingDown = function(startNumber) {\n\tif(startNumber > 0) {\n\t\tconsole.log(startNumber);\n\t\treturn countingDown(startNumber);\n\t} else {\n\t\treturn startNumber;\n\t}\n};"}, 

{"option":"const factorial = numVar => {\n\tif (numVar < 0) return;\n\tif (numVar === 0) return 1;\n\treturn numVar * factorial ( numVar - 1 );\n};"}, 

{"option":"function factorial ( numVar ) {\n\tif (numVar < 0) return;\n\tif(numVar === 0) return 1;\n\treturn numVar -1;\n}"}, 

{"option":"const sumToTen = numVar => {\n\tif (numVar < 0)\n\t\treturn;\n\treturn sumToTen(numVar + 1);\n};"}], 

"answers":[1,2],
"favorite":true

}, { 

"question":"Refer to the code declarations below:<code>let str1 = 'Java';\nlet str2 = 'Script';</code>Which three expressions return the string JavaScript? Choose 3 answers", 

"options": 

[{"option":"str1.join(str2);"}, 

{"option":"str1.concat(str2);"}, 

{"option":"concat(str1, str2);"}, 

{"option":"`$(str1) $(str2}`;"}, 

{"option":"str1 + str2;"}], 

"answers":[2,4,5] 

}, { 

"question":"Refer to the code:<code>function Animal(size, type){\n\tthis.size = size || 'small';\n\tthis.type = type || 'Animal';\n\tthis.canTalk = false;\n}\n\nlet Pet = function(size, type, name, owner) {\n\tAnimal.call(this, size, type);\n\tthis.name = name;\n\tthis.owner = owner;\n}\n\nPet.prototype = Object.create(Animal.prototype);\nlet pet1 = new Pet();\nconsole.log(pet1);</code>Given the code above, which three properties are set for pet1? Choose 3 answers", 

"options": 

[{"option":"name"}, 

{"option":"owner"}, 

{"option":"type"}, 

{"option":"canTalk"}, 

{"option":"size"}], 

"answers":[3,4,5],
"favorite":true

}, { 

"question":"Which code statement correctly retrieves and returns an object from localStorage?", 

"options": 

[{"option":"const retrieveFromLocalStorage = (storageKey) => {\n\treturn JSON.parse(window.localStorage.getItem(storageKey));\n}"}, 

{"option":"const retrieveFromLocalStorage = (storageKey) => {\n\treturn JSON.stringify(window.localStorage.getItem(storageKey));\n}"}, 

{"option":"const retrieveFromLocalStorage = (storageKey) => {\n\treturn window.localStorage.getItem(storageKey);\n}"}, 

{"option":"const retrieveFromLocalStorage = (storageKey) => {\n\treturn window.localStorage[storageKey];\n}"}], 

"answers":[1] 

}, { 

"question":"Consider type coercion, what does the following expression evaluate to?<code>true + 3 + \"100\" + null</code>", 

"options": 

[{"option":"104"}, 

{"option":"4100"}, 

{"option":"'3100null'"}, 

{"option":"'4100null'"}], 

"answers":[4] 

}, { 

"question":"Refer to code below:<code>console.log(0);\nsetTimeout(() => {\n\tconsole.log(1);\n});\n\nconsole.log(2);\n\nsetTimeout(() => {\n\tconsole.log(3);\n}, 0);\n\nconsole.log(4);</code>In which sequence will the numbers be logged?", 

"options": 

[{"option":"01234"}, 

{"option":"02431"}, 

{"option":"02413"}, 

{"option":"13024"}], 

"answers":[3] 

}, { 

"question":"In the browser, the window object is often used to assign variables that require the broadest scope in an application Node.js application does not have access to the window object by default. Which two methods are used to address this? Choose 2 answers", 

"options": 

[{"option":"Use the document object instead of the window object."}, 

{"option":"Assign variables to the global object."}, 

{"option":"Create a new window object in the root file."}, 

{"option":"Assign variables to module.exports and require them as needed."}], 

"answers":[2,4] 

}, { 

"question":"Refer to the code below:<code>const resolveAfterMilliseconds = (ms) => Promise.resolve( setTimeout ( () => console.log(ms), ms ));\nconst aPromise = await resolveAfterMilliseconds(500);\nconst bPromise = await resolveAfterMilliseconds(500);\n\nawait aPromise, wait bPromise;</code>What is the result of running line 05?", 

"options": 

[{"option":"aPromise and bPromise run sequentially."}, 

{"option":"Neither aPromise or bPromise runs."}, 

{"option":"aPromise and bPromise run in parallel."}, 

{"option":"Only aPromise runs."}], 

"answers":[2] 

}, { 

"question":"A developer implements a function that adds a few values.<code>function sum(num) {\n\tif(num == undefined) {\n\t\tnum = 0;\n\t}\n\n\treturn function(num2, num3){\n\t\tif(num3 === undefined) {\n\t\t\tnum3 = 0;\n\t\t}\n\t\treturn num + num2 + num3;\n\t}\n}</code>Which three options can the developer invoke for this function to get a return value of 10? Choose 3 answers", 

"options": 

[{"option":"sum()(10)"}, 

{"option":"sum(5, 5)()"}, 

{"option":"sum()(5, 5)"}, 

{"option":"sum(5)(5)"}, 

{"option":"sum(10)()"}], 

"answers":[1,3,4] 

}, { 

"question":"A developer creates a simple webpage with an input field. When a user enters text in the input field and clicks the button, the actual value of the field must be displayed in the console. Here is the HTML file content:<code><input type=\"text\" value=\"Hello\" name=\"input\">\n<button type=\"button\">Display</button></code>The developer wrote the javascript code below:<code>const button = document.querySelector(\"button\");\nbutton.addEventListener(\"click\", () => {\n\tconst input = document.querySelector(\"input\");\n\tconsole.log(input.getAttribute(value));\n});</code>When the user clicks the button, the output is always Hello. What needs to be done to make this code work as expected?", 

"options": 

[{"option":"Replace line 04 with console.log(input.value);"}, 

{"option":"Replace line 03 with const input = document.getElementByName('input');","explanation":"The correct method is getElementsByName (plural), which returns a NodeList, not a single element."}, 

{"option":"Replace line 02 with button.addCallback(\"click\", function() {","explanation":"addCallback is not a valid method in JavaScript for attaching event listeners."}, 

{"option":"Replace line 02 with button.addEventListener(\"onclick\", function() {","explanation":"The correct event name is \"click\", not \"onclick\"."}], 

"answers":[1] 

}, { 

"question":"What are two unique features of functions defined with a fat arrow as compared to normal function definition? Choose 2 answers", 

"options": 

[{"option":"The function receives an argument that is always in scope, called parentThis, which is the enclosing lexical scope."}, 

{"option":"The function uses the this from the enclosing scope."}, 

{"option":"The function generated its own this making it useful for separating the function's scope from its enclosing scope."}, 

{"option":"If the function has a single expression in the function body, the expression will be evaluated and implicit returned."}], 

"answers":[2,4], 

"favorite": true 

}, { 

"question":"Refer to HTML below:<code><p>The current status of an Order: <span id=\"status\">In Progress</span></p></code>Which JavaScript statement changes the text In Progress to Completed?", 

"options": 

[{"option":"document.getElementById(\"status\").value = 'Completed';"}, 

{"option":"document.getElementById(\"#status\").innerHTML = 'Completed';"}, 

{"option":"document.getElementById(\"status\").innerHTML = 'Completed';"}, 

{"option":"document.getElementById(\".status\").innerHTML = 'Completed';"}], 

"answers":[3] 

}, { 

"question":"Refer to the code below:<code>let foodMenu1 = ['pizza', 'burger', 'French fries'];\nlet finalMenu = foodMenu1;\nfinalMenu.push('Garlic bread');</code>What is the value of foodMenu1 after the code executes?", 

"options": 

[{"option":"['pizza','Burger', 'French fires', 'Garlic bread']"}, 

{"option":"['pizza','Burger', 'French fires']"}, 

{"option":"['Garlic bread']"}, 

{"option":"['Garlic bread', 'pizza', 'Burger', 'French fires']"}], 

"answers":[1] 

}, { 

"question":"Refer to the code below:<code>let inArray =[ [1, 2], [3, 4, 5] ];</code>Which two statements result in the array [1, 2, 3, 4, 5]? Choose 2 answers", 

"options": 

[{"option":"[].concat.apply([], inArray);"}, 

{"option":"[].concat(...inArray);"}, 

{"option":"[].concat.apply(inArray, []);"}, 

{"option":"[].concat([...inArray]);"}], 

"answers":[1,2], 

"favorite": true 

}, { 

"question":"Refer to following code block:<code>let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nlet output = 0;\nfor(let num of array){\n\tif (output > 10) {\n\t\tbreak;\n\t}\n\tif(num % 2 == 0){\n\t\tcontinue;\n\t}\n\toutput += num;\n}</code>What is the value of output after the code executes?", 

"options": 

[{"option":"16"}, 

{"option":"36"}, 

{"option":"11"}, 

{"option":"25"}], 

"answers":[1], 

"favorite": true 

}, { 

"question":"A Developer wrote the following code to test a sum3 function that takes in an array of numbers and returns the sum of the first three number in the array, the test passes:<code>let res = sum3([1, 2, 3]);\nconsole.assert(res === 6);\n\nres = sum3([1, 2, 3, 4]);\nconsole.assert(res === 6);</code>A different developer made changes to the behavior of sum3 to instead sum all of the numbers present in the array, the test passes. Which two results occur when running the test on the updated sum3 function?", 

"options": 

[{"option":"The line 02 assertion fails"}, 

{"option":"The line 02 assertion passes."}, 

{"option":"The line 05 assertion fails."}, 

{"option":"The line 05 assertion passes."}], 

"answers":[2,3] 

}, { 

"question":"Refer to the following code:<code><html lang=\"en\">\n\t<body>\n\t\t<div onclick=\"console.log('Outer message');\">\n\t\t\t<button id=\"myButton\">Click me<button>\n\t\t</div>\n\t</body>\n\n\t<script>\n\tfunction displayMessage(ev) {\n\t\tev.stopPropagation();\n\t\tconsole.log('Inner message.');\n\t}\n\tconst elem = document.getElementById('myButton');\n\telem.addEventListener('click', displayMessage);\n\t</script>\n</html></code>What will the console show when the button is clicked?", 

"options": 

[{"option":"Inner message Outer message"}, 

{"option":"Inner message"}, 

{"option":"Outer message"}, 

{"option":"Outer message Inner message"}], 

"answers":[2] 

}, { 

"question":"Refer to the code below:<code>document.body.addEventListener('click', (event) => {\n\tif(/* answer here*/){\n\t\tconsole.log('myElement clicked');\n\t}\n});</code>Which replacement for the conditional statement on line 02 allows a developer to correctly determine that a specific element, myElement on the page had been clicked?", 

"options": 

[{"option":"event.target.id == 'myElement'"}, 

{"option":"event.target == 'myElement'"}, 

{"option":"event.id == 'myElement'"}, 

{"option":"event.target.name == 'myElement'"}], 

"answers":[1] 

}, { 

"question":"A developer creates a new web server that uses Node.js. It imports a server library that uses events and callbacks for handling server functionality. The server library is imported with require and is made available to the code by a variable named server. The developer wants to log any issues that the server has while booting up. Given the code and the information the developer has, which code logs an error at boost with an event?", 

"options": 

[{"option":"try {\n\tserver.start();\n} catch(error) {\n\tconsole.log('ERROR', error); \n}"}, 

{"option":"server.catch((server) =&gt; {\n\tconsole.log('ERROR', error); \n});"}, 

{"option":"server.on('error', (error) =&gt; {\n\tconsole.log('ERROR', error); \n});"}, 

{"option":"server.error((server) =&gt; {\n\tconsole.log('ERROR', error); \n});"}], 

"answers":[3],
"favorite":true

}, { 

"question":"A developer creates a class that represents a blog post based on the requirement that a Post should have a body author and view count. The Code shown below:<code>class Post {\n\t// Insert code here\n\t\tthis.body = body;\n\t\tthis.author = author;\n\t\tthis.viewCount = viewCount;\n\t}\n}</code>Which statement should be inserted in the placeholder on line 02 to allow for a variable to be set to a new instanceof a Post with the three attributes correctly populated?", 

"options": 

[{"option":"super (body, author, viewCount) {"}, 

{"option":"function Post (body, author, viewCount) {"}, 

{"option":"constructor (body, author, viewCount) {"}, 

{"option":"constructor() {"}], 

"answers":[3] 

}, { 

"question":"Refer to the code below:<code>const addBy = ?\nconst addByEight = addBy(8);\nconst sum = addBYEight(50);</code>Which two functions can replace line 01 and return 58 to sum? Choose 2 answers", 

"options": 

[{"option":"const addBy = function(num1){ return function(num2){ return num1 + num2; }"}, 

{"option":"const addBy = function(num1){ return num1 + num2; }"}, 

{"option":"const addBy = (num1) =&gt; num1 + num2 ;"}, 

{"option":"const addBY = (num1) =&gt; (num2) =&gt; num1 + num2;"}], 

"answers":[1, 4] 

}, { 

"question":"A developer is required to write a function that calculates the sum of elements in an array but is getting undefined every time the code is executed.The developer needs to find what is missing in the code below.<code>const sumFunction = arr => {\n\treturn arr.reduce((result, current) => {\n\t\t//\n\t\tresult += current;\n\t\t//\n\t}, 10);\n};</code>Which option makes the code work as expected?", 

"options": 

[{"option":"Replace line 02 with return arr.map(( result, current) =&gt; ("}, 

{"option":"Replace line 04 with result = result +current;"}, 

{"option":"Replace line 03 with if(arr.length == 0 ) ( return 0; )"}, 

{"option":"Replace line 05 with return result;"}], 

"answers":[4] 

}, { 

"question":"The developer has a function that prints \"Hello\" to an input name. To test this, the developer created a function that returns \"World\". However the following snippet does not print \"Hello World\".<code>const sayHello = (name) => {\n\tconsole.log('Hello', name);\n}\n\nconst world = () => {\n\treturn 'world';\n}\n\nsayHello(world);</code>What can the developer do to change the code to print 'Hello World'?", 

"options": 

[{"option":"Change line 7 to )();"}, 

{"option":"Change line 2 to console.log('Hello', name());"}, 

{"option":"Change line 9 to sayHello(world)();"}, 

{"option":"Change line 5 to function world() {"}], 

"answers":[2] 

}, { 

"question":"A developer is setting up a Node,js server and is creating a script at the root of the source code, index,js, that will start the server when executed. The developer declares a variable that needs the folder location that the code executes from. Which global variable can be used in the script?", 

"options": 

[{"option":"window.location"}, 

{"option":"_filename"}, 

{"option":"_dirname"}, 

{"option":"this.path"}], 

"answers":[3] 

}, { 

"question":"Refer to the code below:<code>const event = new CustomEvent(\n\t// Missing Code\n);\nobj.dispatchEvent(event);</code>A developer needs to dispatch a custom event called update to send information about recordId. Which two options could a developer insert at the placeholder in line 02 to achieve this? Choose 2 answers", 

"options": 

[{"option":"'Update' , '123abc'"}, 

{"option":"{ type : 'update', recordId : '123abc' }"}, 

{"option":"'Update' , { recordId : '123abc' }"}, 

{"option":"'Update' , {  Details: { recordId: '123abc' } }"}], 

"answers":[3,4] 

}, { 

"question":"Refer to the following object.<code>const dog = {\n\tfirstName: 'Beau',\n\tlastName: 'Boo',\n\tget fullName(){\n\t\treturn this.firstName + ' ' + this.lastName;\n\t}\n}</code>How can a developer access the fullName property for dog?", 

"options": 

[{"option":"dog.fullName"}, 

{"option":"dog.fullName()"}, 

{"option":"dog.get.fullName"}, 

{"option":"dog.function.fullName"}], 

"answers":[1] 

}, { 

"question":"Refer to the string below:<code>const str = 'Salesforce';</code>Which two statements result in the word 'Sales'? Choose 2 answers", 

"options": 

[{"option":"str.substr(1, 5);"}, 

{"option":"str.substr(0, 5);"}, 

{"option":"str.substring(1, 5);"}, 

{"option":"str.substring(0, 5);"}], 

"answers":[2,4] 

}, { 

"question":"Cloud Kicks has a class to represent items for sale in an online store, as shown below:<code>class Item {\n\tconstructor (name, price){\n\t\tthis.name = name;\n\t\tthis.price = price;\n\t}\n\n\tformattedPrice(){\n\t\treturn 's' + String(this.price);\n\t}\n}</code>A new business requirement comes in that requests a ClothingItem class that should have all of the properties and methods of the Item class but will also have properties that are specific to clothes. Which line of code properly declares the clothingItem class such that it inherits from Item?", 

"options": 

[{"option":"class ClothingItem implements Item{"}, 

{"option":"class ClothingItem {"}, 

{"option":"class ClothingItem super Item {"}, 

{"option":"class ClothingItem extends Item {"}], 

"answers":[4] 

}, { 

"question":"Refer to code below: <code>let first = \"who\";\nlet second = \"what\";\ntry{\n\ttry{\n\t\tthrow new error(\"Sad trombone\");\n\t} catch (err){\n\t\tfirst = \"why\";\n\t} finally {\n\t\tsecond = \"when\";\n\t}\n} catch (err) {\n\tsecond = \"where\";\n}</code>What are the values for first and second once the code executes?", 

"options": 

[{"option":"first is who and second is when"}, 

{"option":"first is why and second is where"}, 

{"option":"first is who and second is where"}, 

{"option":"first is why and second is when"}], 

"answers":[4] 

}, { 

"question":"Teams at Universal Containers (UC) work on multiple JavaScript projects at the same time. UC is thinking about reusability and how each team can benefit from the work of others. Going open-source or public is not an option at this time. Which option is available to UC with npm?", 

"options": 

[{"option":"Private packages can be scored, and scopes can be associated to a private registries."}, 

{"option":"Private registries are not supported by npm, but packages can be installed via URL."}, 

{"option":"Private packages are not supported, but they can use another package manager like yarn."}, 

{"option":"Private registries are not supported by npm, but packages can be installed via git."}], 

"answers":[1] 

}, { 

"question":"Which option is true about the strict mode in imported modules?", 

"options": 

[{"option":"Add the statement use non-strict, before any other statements in the module to enable not-strict mode."}, 

{"option":"You can only reference notStrict() functions from the imported module."}, 

{"option":"Imported modules are in strict mode whether you declare them as such or not."}, 

{"option":"Add the statement use strict = false; before any other statements in the module to enable not- strict mode."}], 

"answers":[2] 

}, { 

"question":"Refer to HTML below:<code><div id='main'>\n\t<div id='card-00'>This card is smaller.</div>\n\t<div id='card-01'>The width and height of this card is determined by its contents.</div>\n</div></code>Which expression outputs the screen width of the element with the ID card-01?", 

"options": 

[{"option":"document.getElementById('card-01').getBoundingClientRect().width"}, 

{"option":"document.getElementById('card-01').style.width"}, 

{"option":"document.getElementById('card-01').width"}, 

{"option":"document.getElementById('card-01').innerHTML.lenght * e"}], 

"answers":[1] 

}, { 

"question":"A team that works on a big project uses npm to deal with projects dependencies. A developer added a dependency does not get downloaded when they execute npm install. Which two reasons could be possible explanations for this? Choose 2 answers.", 

"options": 

[{"option":"The developer missed the option --add when adding the dependency."}, 

{"option":"The developer added the dependency as a dev dependency, and NODE_ENVIs set to production."}, 

{"option":"The developer missed the option --save when adding the dependency."}], 

"answers":[2,3] 

}, { 

"question":"A developer publishes a new version of a package with new features that do not break backward compatibility. The previous version number was 1.1.3. Following semantic versioning format, what should the new package version number be?", 

"options": 

[{"option":"2.0.0"}, 

{"option":"1.2.3"}, 

{"option":"1.1.4"}, 

{"option":"1.2.0"}], 

"answers":[4] 

}, { 

"question":"Refer to the code below?<code>let searchString = ' look for this ';</code>Which two options remove the whitespace from the beginning of searchString? Choose 2 answers.", 

"options": 

[{"option":"searchString.trimEnd();"}, 

{"option":"searchString.trimStart();"}, 

{"option":"trimStart(searchString);"}, 

{"option":"searchString.replace(/*\\s\\s*/, ‘');"}], 

"answers":[2,4] 

}, { 

"question":"Given code below:<code>setTimeout (() => { console.log(1); }, 0);\nconsole.log(2);\nnew Promise ((resolve, reject )) = > ( setTimeout(() => { reject(console.log(3)); }, 1000); ))\n.catch(() => { console.log(4); });\nconsole.log(5);</code>What is logged to the console?", 

"options": 

[{"option":"2 1 4 3 5"}, 

{"option":"2 5 1 3 4"}, 

{"option":"1 2 4 3 5"}, 

{"option":"1 2 5 3 4"}], 

"answers":[2] 

},  

 

 

{ 

"question":"A developer uses the code below to format a date: <code>const date = new Date(2020, 05, 10);\n\nconst dateDisplayOptions = {\n\tyear: 'numeric',\n\tmonth: 'long',\n\tday: 'numeric'\n};\n\nconst formattedDate = date.toLocaleDateString('en', dateDisplayOptions);</code>After executing, what is the value of formattedDate?", 

"options": 

[{"option":"June 10, 2020"}, 

{"option":"May 10, 2020"}, 

{"option":"November 05, 2020"}, 

{"option":"October 05, 2020"}], 

"answers":[1], 

"favorite":true 

}, 

{ 

"question":"Refer to the following code:<code>function test (val) {\n\tif(val === undefined) {\n\t\treturn 'Undefined values!';\n\t}\n\n\tif (val === null) {\n\t\treturn 'Null value!';\n\t}\n\n\treturn val;\n}\n\nlet x;\ntest(x);</code>What is returned by the function call on line 13?", 

"options": 

[{"option":"Undefined"}, 

{"option":"'Null value!'"}, 

{"option":"Line 13 throws an error."}, 

{"option":"'Undefined values!'"}], 

"answers":[4] 

}, 

{ 

"question":"Given the expressions var1 and var2, what are two valid ways to return the concatenation of the two expressions and ensure it is string? Choose 2 answers", 

"options": 

[{"option":"String(var1).concat(var2)"}, 

{"option":"var1 + var2"}, 

{"option":"var1.toString() + var2.toString()"}, 

{"option":"String.concat(var1 +var2)"}], 

"answers":[1,3] 

}, 

{ 

"question":"Given two expressions var1 and var2. What are two valid ways to return the logical AND of the two expressions and ensure it is data type Boolean? Choose 2 answers", 

"options": 

[{"option":"Boolean(var1 &amp;&amp; var2)"}, 

{"option":"var1 &amp;&amp; var2"}, 

{"option":"var1.toBoolean() &amp;&amp; var2.toBoolean()"}, 

{"option":"Boolean(var1) &amp;&amp; Boolean(var2)"}], 

"answers":[1,4], 

"favorite":true 

}, 

{ 

"question":"A developer has the function, shown below, that is called when a page loads.<code>function onload() {\n\tconsole.log(\"Page has loaded!\");\n}</code>Where can the developer see the log statement after loading the page in the browser?", 

"options": 

[{"option":"Browser javaScript console"}, 

{"option":"Terminal running the web server."}, 

{"option":"Browser performance toots"}, 

{"option":"On the webpage."}], 

"answers":[1] 

}, 

{ 

"question":"Refer to the code below:<code>async funct on functionUnderTest(isOK) {\n\tif (isOK) return 'OK';\n\tthrow new Error('not OK');\n}</code>Which assertion accuretely tests the above code?", 

"options": 

[{"option":"console.assert(await functionUnderTest(true), ' not OK ')"}, 

{"option":"console.assert(await functionUnderTest(true), ' OK ')"}, 

{"option":"console.assert(await functionUnderTest(true), ' not OK ')"}, 

{"option":"console.assert(await functionUnderTest(true), 'OK')"}], 

"answers":[4] 

}, 

{ 

"question":"Refer to the code below:<code>const server = require('server');\n/* Insert code here */</code>A developer imports a library that creates a web server. The imported library uses events and callbacks to start the servers. Which code should be inserted at the line 02 to set up an event and start the web server?", 

"options": 

[{"option":"server()"}, 

{"option":"server.on('connect', (port) =&gt; { console.log('Listening on ' , port); })"}, 

{"option":"server.start();"}, 

{"option":"console.log('Listening on ', port) ;"}, 

{"option":"serve((port) =&gt; {"}], 

"answers":[2] 

}, 

{ 

"question":"Refer to the following code that imports a module named utils:<code>import (foo, bar) from '/path/Utils.js';\nfoo();\nbar();</code>Which two implementations of Utils.js export foo and bar such that the code above runs without error? Choose 2 answers", 

"options": 

[{"option":"const foo = () =&gt; { return 'foo'; }\nconst bar = () => { return 'bar'; }\nexport { bar, foo }"}, 

{"option":"// FooUtils.js and BarUtils.js exist\nimport (foo) from '/path/FooUtils.js';\nimport (boo) from '/path/NarUtils.js'"}, 

{"option":"export default class {\n\tfoo() { return 'foo'; }\n\tbar() { return 'bar'; }\n}"}, 

{"option":"const foo = () =&gt; { return 'foo';}\nconst bar = () => { return 'bar'; }\nexport default foo, bar;"}], 

"answers":[1,3],
"favorite":true

}, 

 

 

 

 

 

 

 

 

{ 

"question":"Which statement is accurate regarding how Jest tests use jsdom?", 

"options": 

[{"option":"Each test file shares a single instance of jsdom and changes are not reset between tests inside the file"}, 

{"option":"Each test file shares a single instance of jsdom and changes are reset for each describe block"}, 

{"option":"Each test suite shares a single instance of jsdom and changes are reset for each test suite"}, 

{"option":"Each test block has its own instance of jsdom and changes are reset for each test block"}], 

"answers":[1] 

},{ 

"question":"Which sequence allows for testing a property without waiting for an asynchronous update?", 

"options": 

[{"option":"The property is set prior to the renderedCallback() call."}, 

{"option":"The property is set prior to the appendChild() call."}, 

{"option":"The property is set after the renderedCallback() call."}, 

{"option":"The property is set after the appendChild() call."}], 

"answers":[2],
"favorite":true

},{ 

"question":"Which import is required and only available in Lightning Web Component Jest tests?", 

"options": 

[{"option":"import { createElements } from 'lwc';"}, 

{"option":"import { testElement } from 'lwc';"}, 

{"option":"import { createElement } from 'lwc';"}, 

{"option":"import { testElements } from 'lwc';"}], 

"answers":[3] 

},{ 

"question":"Which statement must be used to set fake timers before all the tests in a Jest JavaScript file?", 

"options": 

[{"option":"jest.useFakeTimers() inside the beforeAll() function"}, 

{"option":"jest.useFakeTimers() inside the beforeTests() function"}, 

{"option":"jest.useMockTimers() inside the beforeAll() function"}, 

{"option":"jest.useMockTimers() inside the beforeTests() function"}], 

"answers":[1] 

},{ 

"question":"Which function must be used for Apex Wire adapters in Jest tests?", 

"options": 

[{"option":"createTestWireAdapter() from \"@salesforce/sfdx-lwc-jest\";"}, 

{"option":"createApexWireAdapter() from \"@salesforce/wire-service-jest-utils\";"}, 

{"option":"createApexWireAdapter() from \"@salesforce/sfdx-lwc-jest\";"}, 

{"option":"createApexTestWireAdapter() from \"@salesforce/wire-service-jest-utils\";"}], 

"answers":[4] 

},{ 

"question":"Which statement is true about testing Base Lightning Components?", 

"options": 

[{"option":"All properties from Base Lightning components are reflected in the DOM."}, 

{"option":"Base Lightning components have some properties that are not reflected as attributes in the DOM."}, 

{"option":"The order in which slots are rendered will follow the order established in your HTML file."}, 

{"option":"Events can be fired from mocked Base Lightning components natively."}], 

"answers":[2] 

},{ 

"question":"What must be done to Jest tests to cause a module import statement inside a JavaScript file to resolve to the mocked version of this module?", 

"options": 

[{"option":"Add the mocked module file to the scripts folder in the root folder of the project"}, 

{"option":"Add the mocked module file to the moduleNameMapper settings in the jest.config file"}, 

{"option":"Enable mocked modules by using the function require() inside the test"}, 

{"option":"Use the function emit() from a wired adapter that invoked the mocked module"}], 

"answers":[2] 

},{ 

"question":"Given a registered Apex wire adapter named findRecordsAdapter and a mocked @wire named mockRecords, which statement causes a Jest test to use the mocked records once the Apex method is called?", 

"options": 

[{"option":"jest.mockRecords.emit(findRecordsAdapter);"}, 

{"option":"jest.findRecordsAdapter(mockRecords);"}, 

{"option":"findRecordsAdapter.emit(mockRecords);"}, 

{"option":"mockRecords.emit(findRecordsAdapter);"}], 

"answers":[3] 

},{ 

"question":"Which statement allows the Jest test to catch a mock handler for a toast event?", 

"options": 

[{"option":"const handler = jest.fn(); element.addEventListener(ShowToastEventName, handler);"}, 

{"option":"const handler = jest.fn(); element.dispatchEvent(ShowToastEventName, handler);"}, 

{"option":"const showToastEventName = jest.fn();"}, 

{"option":"const handler = jest.fn(); handler.dispatchEvent(ShowToastEventName);"}], 

"answers":[1] 

}] 